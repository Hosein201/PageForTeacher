{"version":3,"sources":["../src/lib/toastr/toast.directive.ts","../src/lib/toastr/toastr-config.ts","../../node_modules/tslib/tslib.es6.js","../src/lib/portal/portal.ts","../src/lib/portal/dom-portal-host.ts","../src/lib/overlay/overlay-container.ts","../src/lib/overlay/overlay-ref.ts","../src/lib/overlay/overlay.ts","../src/lib/toastr/toast-injector.ts","../src/lib/toastr/toastr.service.ts","../src/lib/toastr/toast.component.ts","../src/lib/toastr/toastr.module.ts","../src/lib/toastr/toast-noanimation.component.ts"],"names":["ToastContainerDirective","el","this","prototype","getContainerElement","nativeElement","Directive","args","selector","exportAs","ElementRef","NgModule","declarations","exports","ToastPackage","toastId","config","message","title","toastType","toastRef","_this","_onTap","Subject","_onAction","afterClosed","subscribe","complete","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","newestOnTop","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","InjectionToken","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","create","__values","o","s","Symbol","iterator","m","i","length","value","done","TypeError","ComponentPortal","component","injector","attach","host","_attachedHost","detach","undefined","defineProperty","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_super","_hostDomElement","_componentFactoryResolver","_appRef","__","constructor","__extends","componentRef","componentFactory","resolveComponentFactory","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","createElement","classList","add","body","Injectable","providedIn","Inject","DOCUMENT","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ComponentFactoryResolver","ApplicationRef","ToastRef","_overlayRef","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","manualClosed","timeoutReset","countDuplicate","close","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","token","notFoundValue","flags","ToastrService","overlay","_injector","sanitizer","ngZone","currentlyActive","toasts","index","toastrConfig","assign","default","show","override","type","_preBuildNotification","applyConfig","clear","_b","_c","toast","remove","found","_findToast","activeToast","splice","findDuplicate","resetOnDuplicate","hasDuplicateTitle","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","SecurityContext","HTML","toastPackage","toastInjector","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","Injector","DomSanitizer","NgZone","Toast","toastrService","width","toastClasses","state","params","options","originalTimeout","sub","activateToast","sub1","sub2","sub3","count","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","Component","template","animations","trigger","style","opacity","transition","animate","preserveWhitespaces","HostBinding","HostListener","DefaultGlobalConfig","ToastrModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","entryComponents","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n","import { InjectionToken } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\nexport type ProgressAnimationType = 'increasing' | 'decreasing';\n\n/**\n * Configuration for an individual toast.\n */\nexport interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean | 'timeOut' | 'extendedTimeOut';\n  /**\n   * toast time to live in milliseconds\n   * default: 5000\n   */\n  timeOut: number;\n  /**\n   * toast show close button\n   * default: false\n   */\n  closeButton: boolean;\n  /**\n   * time to close after a user hovers over toast\n   * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation: ProgressAnimationType;\n\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: ngx-toastr\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on toast message\n   * default: toast-message\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n  [key: string]: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n  /**\n   * display the number of duplicate messages\n   * default: false\n   */\n  countDuplicates: boolean;\n  /**\n   * Reset toast timeout when there's a duplicate (preventDuplicates needs to be set to true)\n   * default: false\n   */\n  resetTimeoutOnDuplicate: boolean;\n  /**\n   * consider the title of a toast when checking if duplicate\n   * default: false\n   */\n  includeTitleDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<void>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap(): void {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<void> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any): void {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\n/** @deprecated use GlobalConfig */\nexport interface GlobalToastrConfig extends GlobalConfig {}\n/** @deprecated use IndividualConfig */\nexport interface IndividualToastrConfig extends IndividualConfig {}\n/** @deprecated use IndividualConfig */\nexport interface ToastrConfig extends IndividualConfig {}\n\nexport const DefaultNoComponentGlobalConfig: GlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  },\n\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n};\n\nexport interface ToastToken {\n  default: GlobalConfig;\n  config: Partial<GlobalConfig>;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  // tslint:disable-next-line:callable-types\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef!: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean): ComponentRef<any> {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, OnDestroy } from '@angular/core';\n\n/** Container inside which all toasts will render. */\n@Injectable({ providedIn: 'root' })\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement!: HTMLElement;\n\n  constructor(@Inject(DOCUMENT) protected _document: any) {}\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","/* tslint:disable:no-non-null-assertion */\nimport { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, ComponentFactoryResolver, Inject, Injectable } from '@angular/core';\n\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\nimport { OverlayRef } from './overlay-ref';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n@Injectable({ providedIn: 'root' })\nexport class Overlay {\n  // Namespace panes by overlay container\n  private _paneElements: Map<ToastContainerDirective, Record<string, HTMLElement>> = new Map();\n\n  constructor(\n    private _overlayContainer: OverlayContainer,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    @Inject(DOCUMENT) private _document: any,\n  ) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(\n    positionClass: string = '',\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)) {\n      this._paneElements.set(overlayContainer as ToastContainerDirective, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass]) {\n      this._paneElements.get(overlayContainer as ToastContainerDirective)![\n        positionClass\n      ] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer as ToastContainerDirective)![positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(\n    positionClass: string,\n    overlayContainer?: ToastContainerDirective,\n  ): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n","import { Injector, InjectFlags } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance!: T;\n\n  /** Count of duplicates of this toast */\n  private duplicatesCount = 0;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<void>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<void>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<void>();\n  /** notifies the toast that it should reset the timeouts */\n  private _resetTimeout = new Subject<void>();\n  /** notifies the toast that it should count a duplicate toast */\n  private _countDuplicate = new Subject<number>();\n\n  constructor(private _overlayRef: OverlayRef) {}\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset(): Observable<any> {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate(): Observable<number> {\n    return this._countDuplicate.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout: boolean, countDuplicate: boolean) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector\n  ) {}\n\n  get<T>(token: any, notFoundValue?: T, flags?: InjectFlags): T | ToastPackage {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get<T>(token, notFoundValue, flags);\n  }\n}\n","import { ComponentRef, Inject, Injectable, Injector, NgZone, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  ToastToken,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the title of your toast. Stored to prevent duplicates */\n  title: string;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<void>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<void>;\n  /** triggered on toast click */\n  onTap: Observable<void>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer?: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone,\n  ) {\n    this.toastrConfig = {\n      ...token.default,\n      ...token.config,\n    };\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = {\n        ...token.default.iconClasses,\n        ...token.config.iconClasses,\n      };\n    }\n  }\n  /** show toast */\n  show(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate: boolean, countDuplicates: boolean) {\n    const { includeTitleDuplicates } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number; activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(\n      title,\n      message,\n      this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0,\n      this.toastrConfig.countDuplicates,\n    );\n    if (\n      ((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n      this.toastrConfig.preventDuplicates &&\n      duplicate !== null\n    ) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({ opacity: 0 })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition(\n        'inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition(\n        'active => removed',\n        animate('{{ easeTime }}ms {{ easing }}')\n      )\n    ])\n  ],\n  preserveWhitespaces: false\n})\nexport class Toast implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut')\n  state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in'\n    }\n  };\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle(): string | undefined {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state, value: 'active' };\n\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = { ...this.state, value: 'removed' };\n    this.outsideTimeout(\n      () => this.toastrService.remove(this.toastPackage.toastId),\n      +this.toastPackage.config.easeTime\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state.value === 'removed'\n    ) {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.timeout = setTimeout(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: () => any, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(\n        () =>\n          (this.intervalId = setInterval(\n            () => this.runInsideAngular(func),\n            timeout\n          ))\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: () => any) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Toast } from './toast.component';\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  TOAST_CONFIG,\n} from './toastr-config';\n\nexport const DefaultGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [Toast],\n  exports: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n\n@NgModule({\n  imports: [CommonModule],\n})\nexport class ToastrComponentlessModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastrModule> {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders } from '@angular/core';\nimport {\n  ApplicationRef,\n  Component,\n  HostBinding,\n  HostListener,\n  NgModule,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport {\n  DefaultNoComponentGlobalConfig,\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n  TOAST_CONFIG,\n} from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n})\nexport class ToastNoAnimation implements OnDestroy {\n  message?: string | null;\n  title?: string;\n  options: IndividualConfig;\n  duplicatesCount!: number;\n  originalTimeout: number;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n\n  /** hides component when waiting to be displayed */\n  @HostBinding('style.display')\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  /** controls animation */\n  state = 'inactive';\n  private timeout: any;\n  private intervalId: any;\n  private hideTime!: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n  private sub2: Subscription;\n  private sub3: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${\n      toastPackage.config.toastClass\n    }`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n    );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (\n      (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n      this.options.extendedTimeOut === 0 ||\n      this.state === 'removed'\n    ) {\n      return;\n    }\n    this.timeout = setTimeout(\n      () => this.remove(),\n      this.options.extendedTimeOut,\n    );\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\n\nexport const DefaultNoAnimationsGlobalConfig: GlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation,\n};\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ToastNoAnimation],\n  exports: [ToastNoAnimation],\n  entryComponents: [ToastNoAnimation],\n})\nexport class ToastNoAnimationModule {\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders<ToastNoAnimationModule> {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [\n        {\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config,\n          },\n        },\n      ],\n    };\n  }\n}\n"]}