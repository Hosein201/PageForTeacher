{"ast":null,"code":"import _slicedToArray from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar CookieService = /*#__PURE__*/function () {\n  function CookieService( // The type `Document` may not be used here. Although a fix is on its way,\n  // we will go with `any` for now to support Angular 2.4.x projects.\n  // Issue: https://github.com/angular/angular/issues/12631\n  // Fix: https://github.com/angular/angular/pull/14894\n  document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n  platformId) {\n    _classCallCheck(this, CookieService);\n\n    this.document = document;\n    this.platformId = platformId;\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n  /**\n   * @param name Cookie name\n   * @returns boolean - whether cookie with specified name exists\n   */\n\n\n  _createClass(CookieService, [{\n    key: \"check\",\n    value: function check(name) {\n      if (!this.documentIsAccessible) {\n        return false;\n      }\n\n      name = encodeURIComponent(name);\n      var regExp = this.getCookieRegExp(name);\n      var exists = regExp.test(this.document.cookie);\n      return exists;\n    }\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (this.documentIsAccessible && this.check(name)) {\n        name = encodeURIComponent(name);\n        var regExp = this.getCookieRegExp(name);\n        var result = regExp.exec(this.document.cookie);\n        return this.safeDecodeURIComponent(result[1]);\n      } else {\n        return '';\n      }\n    }\n    /**\n     * @returns all the cookies in json\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this = this;\n\n      if (!this.documentIsAccessible) {\n        return {};\n      }\n\n      var cookies = {};\n      var document = this.document;\n\n      if (document.cookie && document.cookie !== '') {\n        document.cookie.split(';').forEach(function (currentCookie) {\n          var _currentCookie$split = currentCookie.split('='),\n              _currentCookie$split2 = _slicedToArray(_currentCookie$split, 2),\n              cookieName = _currentCookie$split2[0],\n              cookieValue = _currentCookie$split2[1];\n\n          cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);\n        });\n      }\n\n      return cookies;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n        var optionsBody = {\n          expires: expiresOrOptions,\n          path: path,\n          domain: domain,\n          secure: secure,\n          sameSite: sameSite ? sameSite : 'Lax'\n        };\n        this.set(name, value, optionsBody);\n        return;\n      }\n\n      var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n      var options = expiresOrOptions ? expiresOrOptions : {};\n\n      if (options.expires) {\n        if (typeof options.expires === 'number') {\n          var dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n          cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n        } else {\n          cookieString += 'expires=' + options.expires.toUTCString() + ';';\n        }\n      }\n\n      if (options.path) {\n        cookieString += 'path=' + options.path + ';';\n      }\n\n      if (options.domain) {\n        cookieString += 'domain=' + options.domain + ';';\n      }\n\n      if (options.secure === false && options.sameSite === 'None') {\n        options.secure = true;\n        console.warn(\"[ngx-cookie-service] Cookie \".concat(name, \" was forced with secure flag because sameSite=None.\") + \"More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130\");\n      }\n\n      if (options.secure) {\n        cookieString += 'secure;';\n      }\n\n      if (!options.sameSite) {\n        options.sameSite = 'Lax';\n      }\n\n      cookieString += 'sameSite=' + options.sameSite + ';';\n      this.document.cookie = cookieString;\n    }\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, path, domain, secure) {\n      var sameSite = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Lax';\n\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      var expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n      this.set(name, '', {\n        expires: expiresDate,\n        path: path,\n        domain: domain,\n        secure: secure,\n        sameSite: sameSite\n      });\n    }\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n\n  }, {\n    key: \"deleteAll\",\n    value: function deleteAll(path, domain, secure) {\n      var sameSite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Lax';\n\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      var cookies = this.getAll();\n\n      for (var cookieName in cookies) {\n        if (cookies.hasOwnProperty(cookieName)) {\n          this.delete(cookieName, path, domain, secure, sameSite);\n        }\n      }\n    }\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n\n  }, {\n    key: \"getCookieRegExp\",\n    value: function getCookieRegExp(name) {\n      var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n      return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n  }, {\n    key: \"safeDecodeURIComponent\",\n    value: function safeDecodeURIComponent(encodedURIComponent) {\n      try {\n        return decodeURIComponent(encodedURIComponent);\n      } catch (_a) {\n        // probably it is not uri encoded. return as is\n        return encodedURIComponent;\n      }\n    }\n  }]);\n\n  return CookieService;\n}();\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nCookieService.ɵprov = ɵɵdefineInjectable({\n  factory: function CookieService_Factory() {\n    return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID));\n  },\n  token: CookieService,\n  providedIn: \"root\"\n});\n\nCookieService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: InjectionToken,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.InjectionToken,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CookieService };","map":{"version":3,"sources":["../../projects/ngx-cookie-service/src/lib/cookie.service.ts","../../../projects/ngx-cookie-service/src/public-api.ts","../../../projects/ngx-cookie-service/src/ngx-cookie-service.ts"],"names":[],"mappings":"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","sourcesContent":["// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\n\nimport { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CookieService {\n  private readonly documentIsAccessible: boolean;\n\n  constructor(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    @Inject(DOCUMENT) private document: any,\n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    @Inject(PLATFORM_ID) private platformId: InjectionToken<object>\n  ) {\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns boolean - whether cookie with specified name exists\n   */\n  check(name: string): boolean {\n    if (!this.documentIsAccessible) {\n      return false;\n    }\n\n    name = encodeURIComponent(name);\n\n    const regExp: RegExp = this.getCookieRegExp(name);\n    const exists: boolean = regExp.test(this.document.cookie);\n\n    return exists;\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns property value\n   */\n  get(name: string): string {\n    if (this.documentIsAccessible && this.check(name)) {\n      name = encodeURIComponent(name);\n\n      const regExp: RegExp = this.getCookieRegExp(name);\n      const result: RegExpExecArray = regExp.exec(this.document.cookie);\n\n      return this.safeDecodeURIComponent(result[1]);\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @returns all the cookies in json\n   */\n  getAll(): { [key: string]: string } {\n    if (!this.documentIsAccessible) {\n      return {};\n    }\n\n    const cookies: { [key: string]: string } = {};\n    const document: any = this.document;\n\n    if (document.cookie && document.cookie !== '') {\n      document.cookie.split(';').forEach((currentCookie) => {\n        const [cookieName, cookieValue] = currentCookie.split('=');\n        cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\n      });\n    }\n\n    return cookies;\n  }\n\n  /**\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param expires  Number of days until the cookies expires or an actual `Date`\n   * @param path     Cookie path\n   * @param domain   Cookie domain\n   * @param secure   Secure flag\n   * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n   */\n  set(name: string, value: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\n\n  /**\n   * Cookie's parameters:\n   * <pre>\n   * expires  Number of days until the cookies expires or an actual `Date`\n   * path     Cookie path\n   * domain   Cookie domain\n   * secure   Secure flag\n   * sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n   * </pre>\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param options  Body with cookie's params\n   */\n  set(\n    name: string,\n    value: string,\n    options?: {\n      expires?: number | Date;\n      path?: string;\n      domain?: string;\n      secure?: boolean;\n      sameSite?: 'Lax' | 'None' | 'Strict';\n    }\n  ): void;\n\n  set(\n    name: string,\n    value: string,\n    expiresOrOptions?: number | Date | any,\n    path?: string,\n    domain?: string,\n    secure?: boolean,\n    sameSite?: 'Lax' | 'None' | 'Strict'\n  ): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n      const optionsBody = {\n        expires: expiresOrOptions,\n        path,\n        domain,\n        secure,\n        sameSite: sameSite ? sameSite : 'Lax',\n      };\n\n      this.set(name, value, optionsBody);\n      return;\n    }\n\n    let cookieString: string = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n    const options = expiresOrOptions ? expiresOrOptions : {};\n\n    if (options.expires) {\n      if (typeof options.expires === 'number') {\n        const dateExpires: Date = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + options.expires.toUTCString() + ';';\n      }\n    }\n\n    if (options.path) {\n      cookieString += 'path=' + options.path + ';';\n    }\n\n    if (options.domain) {\n      cookieString += 'domain=' + options.domain + ';';\n    }\n\n    if (options.secure === false && options.sameSite === 'None') {\n      options.secure = true;\n      console.warn(\n        `[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n          `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`\n      );\n    }\n    if (options.secure) {\n      cookieString += 'secure;';\n    }\n\n    if (!options.sameSite) {\n      options.sameSite = 'Lax';\n    }\n\n    cookieString += 'sameSite=' + options.sameSite + ';';\n\n    this.document.cookie = cookieString;\n  }\n\n  /**\n   * @param name   Cookie name\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n  delete(name: string, path?: string, domain?: string, secure?: boolean, sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n    const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n    this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n  }\n\n  /**\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n  deleteAll(path?: string, domain?: string, secure?: boolean, sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'): void {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    const cookies: any = this.getAll();\n\n    for (const cookieName in cookies) {\n      if (cookies.hasOwnProperty(cookieName)) {\n        this.delete(cookieName, path, domain, secure, sameSite);\n      }\n    }\n  }\n\n  /**\n   * @param name Cookie name\n   * @returns property RegExp\n   */\n  private getCookieRegExp(name: string): RegExp {\n    const escapedName: string = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n  }\n\n  private safeDecodeURIComponent(encodedURIComponent: string): string {\n    try {\n      return decodeURIComponent(encodedURIComponent);\n    } catch {\n      // probably it is not uri encoded. return as is\n      return encodedURIComponent;\n    }\n  }\n}\n","/*\n * Public API Surface of ngx-cookie-service\n */\n\nexport * from './lib/cookie.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}