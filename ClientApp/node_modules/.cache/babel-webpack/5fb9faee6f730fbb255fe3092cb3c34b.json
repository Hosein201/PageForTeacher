{"ast":null,"code":"import _slicedToArray from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, Subscription, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nvar MatTable = /*#__PURE__*/function (_CdkTable) {\n  _inherits(MatTable, _CdkTable);\n\n  var _super = _createSuper(MatTable);\n\n  function MatTable() {\n    var _this;\n\n    _classCallCheck(this, MatTable);\n\n    _this = _super.apply(this, arguments);\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n\n    _this.stickyCssClass = 'mat-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n\n    _this.needsPositionStickyOnElement = false;\n    return _this;\n  }\n\n  return MatTable;\n}(CdkTable);\n\nMatTable.ɵfac = function MatTable_Factory(t) {\n  return ɵMatTable_BaseFactory(t || MatTable);\n};\n\nMatTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTable,\n  selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n  hostAttrs: [1, \"mat-table\"],\n  hostVars: 2,\n  hostBindings: function MatTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  exportAs: [\"matTable\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n  //  is only included in the build if used.\n  {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: CdkTable,\n    useExisting: MatTable\n  }, {\n    provide: CDK_TABLE,\n    useExisting: MatTable\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function MatTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵprojection(1, 1);\n      ɵngcc0.ɵɵelementContainer(2, 0);\n      ɵngcc0.ɵɵelementContainer(3, 1);\n      ɵngcc0.ɵɵelementContainer(4, 2);\n      ɵngcc0.ɵɵelementContainer(5, 3);\n    }\n  },\n  directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.NoDataRowOutlet, ɵngcc1.FooterRowOutlet],\n  styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"],\n  encapsulation: 2\n});\nvar ɵMatTable_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTable);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTable, [{\n    type: Component,\n    args: [{\n      selector: 'mat-table, table[mat-table]',\n      exportAs: 'matTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'mat-table',\n        '[class.mat-table-fixed-layout]': 'fixedLayout'\n      },\n      providers: [// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n      //  is only included in the build if used.\n      {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: CdkTable,\n        useExisting: MatTable\n      }, {\n        provide: CDK_TABLE,\n        useExisting: MatTable\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }],\n      encapsulation: ViewEncapsulation.None,\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nvar MatCellDef = /*#__PURE__*/function (_CdkCellDef) {\n  _inherits(MatCellDef, _CdkCellDef);\n\n  var _super2 = _createSuper(MatCellDef);\n\n  function MatCellDef() {\n    _classCallCheck(this, MatCellDef);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatCellDef;\n}(CdkCellDef);\n\nMatCellDef.ɵfac = function MatCellDef_Factory(t) {\n  return ɵMatCellDef_BaseFactory(t || MatCellDef);\n};\n\nMatCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatCellDef,\n  selectors: [[\"\", \"matCellDef\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkCellDef,\n    useExisting: MatCellDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatCellDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatCellDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matCellDef]',\n      providers: [{\n        provide: CdkCellDef,\n        useExisting: MatCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar MatHeaderCellDef = /*#__PURE__*/function (_CdkHeaderCellDef) {\n  _inherits(MatHeaderCellDef, _CdkHeaderCellDef);\n\n  var _super3 = _createSuper(MatHeaderCellDef);\n\n  function MatHeaderCellDef() {\n    _classCallCheck(this, MatHeaderCellDef);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return MatHeaderCellDef;\n}(CdkHeaderCellDef);\n\nMatHeaderCellDef.ɵfac = function MatHeaderCellDef_Factory(t) {\n  return ɵMatHeaderCellDef_BaseFactory(t || MatHeaderCellDef);\n};\n\nMatHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatHeaderCellDef,\n  selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkHeaderCellDef,\n    useExisting: MatHeaderCellDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatHeaderCellDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderCellDef]',\n      providers: [{\n        provide: CdkHeaderCellDef,\n        useExisting: MatHeaderCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar MatFooterCellDef = /*#__PURE__*/function (_CdkFooterCellDef) {\n  _inherits(MatFooterCellDef, _CdkFooterCellDef);\n\n  var _super4 = _createSuper(MatFooterCellDef);\n\n  function MatFooterCellDef() {\n    _classCallCheck(this, MatFooterCellDef);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MatFooterCellDef;\n}(CdkFooterCellDef);\n\nMatFooterCellDef.ɵfac = function MatFooterCellDef_Factory(t) {\n  return ɵMatFooterCellDef_BaseFactory(t || MatFooterCellDef);\n};\n\nMatFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatFooterCellDef,\n  selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkFooterCellDef,\n    useExisting: MatFooterCellDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatFooterCellDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterCellDef]',\n      providers: [{\n        provide: CdkFooterCellDef,\n        useExisting: MatFooterCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar MatColumnDef = /*#__PURE__*/function (_CdkColumnDef) {\n  _inherits(MatColumnDef, _CdkColumnDef);\n\n  var _super5 = _createSuper(MatColumnDef);\n\n  function MatColumnDef() {\n    _classCallCheck(this, MatColumnDef);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(MatColumnDef, [{\n    key: \"_updateColumnCssClassName\",\n\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    value: function _updateColumnCssClassName() {\n      _get(_getPrototypeOf(MatColumnDef.prototype), \"_updateColumnCssClassName\", this).call(this);\n\n      this._columnCssClassName.push(\"mat-column-\".concat(this.cssClassFriendlyName));\n    }\n  }, {\n    key: \"name\",\n\n    /** Unique name for this column. */\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._setNameInput(name);\n    }\n  }]);\n\n  return MatColumnDef;\n}(CdkColumnDef);\n\nMatColumnDef.ɵfac = function MatColumnDef_Factory(t) {\n  return ɵMatColumnDef_BaseFactory(t || MatColumnDef);\n};\n\nMatColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatColumnDef,\n  selectors: [[\"\", \"matColumnDef\", \"\"]],\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"matColumnDef\", \"name\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkColumnDef,\n    useExisting: MatColumnDef\n  }, {\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: MatColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['matColumnDef']\n  }]\n};\nvar ɵMatColumnDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: CdkColumnDef,\n        useExisting: MatColumnDef\n      }, {\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: MatColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['matColumnDef']\n    }]\n  });\n})();\n/** Header cell template container that adds the right classes and role. */\n\n\nvar MatHeaderCell = /*#__PURE__*/function (_CdkHeaderCell) {\n  _inherits(MatHeaderCell, _CdkHeaderCell);\n\n  var _super6 = _createSuper(MatHeaderCell);\n\n  function MatHeaderCell() {\n    _classCallCheck(this, MatHeaderCell);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return MatHeaderCell;\n}(CdkHeaderCell);\n\nMatHeaderCell.ɵfac = function MatHeaderCell_Factory(t) {\n  return ɵMatHeaderCell_BaseFactory(t || MatHeaderCell);\n};\n\nMatHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatHeaderCell,\n  selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatHeaderCell_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCell);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-header-cell, th[mat-header-cell]',\n      host: {\n        'class': 'mat-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], null, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar MatFooterCell = /*#__PURE__*/function (_CdkFooterCell) {\n  _inherits(MatFooterCell, _CdkFooterCell);\n\n  var _super7 = _createSuper(MatFooterCell);\n\n  function MatFooterCell() {\n    _classCallCheck(this, MatFooterCell);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return MatFooterCell;\n}(CdkFooterCell);\n\nMatFooterCell.ɵfac = function MatFooterCell_Factory(t) {\n  return ɵMatFooterCell_BaseFactory(t || MatFooterCell);\n};\n\nMatFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatFooterCell,\n  selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatFooterCell_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatFooterCell);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-footer-cell, td[mat-footer-cell]',\n      host: {\n        'class': 'mat-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar MatCell = /*#__PURE__*/function (_CdkCell) {\n  _inherits(MatCell, _CdkCell);\n\n  var _super8 = _createSuper(MatCell);\n\n  function MatCell() {\n    _classCallCheck(this, MatCell);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return MatCell;\n}(CdkCell);\n\nMatCell.ɵfac = function MatCell_Factory(t) {\n  return ɵMatCell_BaseFactory(t || MatCell);\n};\n\nMatCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatCell,\n  selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatCell_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatCell);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-cell, td[mat-cell]',\n      host: {\n        'class': 'mat-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar MatHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDef) {\n  _inherits(MatHeaderRowDef, _CdkHeaderRowDef);\n\n  var _super9 = _createSuper(MatHeaderRowDef);\n\n  function MatHeaderRowDef() {\n    _classCallCheck(this, MatHeaderRowDef);\n\n    return _super9.apply(this, arguments);\n  }\n\n  return MatHeaderRowDef;\n}(CdkHeaderRowDef);\n\nMatHeaderRowDef.ɵfac = function MatHeaderRowDef_Factory(t) {\n  return ɵMatHeaderRowDef_BaseFactory(t || MatHeaderRowDef);\n};\n\nMatHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatHeaderRowDef,\n  selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matHeaderRowDef\", \"columns\"],\n    sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRowDef,\n    useExisting: MatHeaderRowDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatHeaderRowDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderRowDef]',\n      providers: [{\n        provide: CdkHeaderRowDef,\n        useExisting: MatHeaderRowDef\n      }],\n      inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar MatFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDef) {\n  _inherits(MatFooterRowDef, _CdkFooterRowDef);\n\n  var _super10 = _createSuper(MatFooterRowDef);\n\n  function MatFooterRowDef() {\n    _classCallCheck(this, MatFooterRowDef);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return MatFooterRowDef;\n}(CdkFooterRowDef);\n\nMatFooterRowDef.ɵfac = function MatFooterRowDef_Factory(t) {\n  return ɵMatFooterRowDef_BaseFactory(t || MatFooterRowDef);\n};\n\nMatFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatFooterRowDef,\n  selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matFooterRowDef\", \"columns\"],\n    sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkFooterRowDef,\n    useExisting: MatFooterRowDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatFooterRowDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterRowDef]',\n      providers: [{\n        provide: CdkFooterRowDef,\n        useExisting: MatFooterRowDef\n      }],\n      inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar MatRowDef = /*#__PURE__*/function (_CdkRowDef) {\n  _inherits(MatRowDef, _CdkRowDef);\n\n  var _super11 = _createSuper(MatRowDef);\n\n  function MatRowDef() {\n    _classCallCheck(this, MatRowDef);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return MatRowDef;\n}(CdkRowDef);\n\nMatRowDef.ɵfac = function MatRowDef_Factory(t) {\n  return ɵMatRowDef_BaseFactory(t || MatRowDef);\n};\n\nMatRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatRowDef,\n  selectors: [[\"\", \"matRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matRowDefColumns\", \"columns\"],\n    when: [\"matRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkRowDef,\n    useExisting: MatRowDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatRowDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatRowDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matRowDef]',\n      providers: [{\n        provide: CdkRowDef,\n        useExisting: MatRowDef\n      }],\n      inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n    }]\n  }], null, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatHeaderRow = /*#__PURE__*/function (_CdkHeaderRow) {\n  _inherits(MatHeaderRow, _CdkHeaderRow);\n\n  var _super12 = _createSuper(MatHeaderRow);\n\n  function MatHeaderRow() {\n    _classCallCheck(this, MatHeaderRow);\n\n    return _super12.apply(this, arguments);\n  }\n\n  return MatHeaderRow;\n}(CdkHeaderRow);\n\nMatHeaderRow.ɵfac = function MatHeaderRow_Factory(t) {\n  return ɵMatHeaderRow_BaseFactory(t || MatHeaderRow);\n};\n\nMatHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatHeaderRow,\n  selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n  exportAs: [\"matHeaderRow\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRow,\n    useExisting: MatHeaderRow\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [ɵngcc1.CdkCellOutlet],\n  encapsulation: 2\n});\nvar ɵMatHeaderRow_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-header-row, tr[mat-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matHeaderRow',\n      providers: [{\n        provide: CdkHeaderRow,\n        useExisting: MatHeaderRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatFooterRow = /*#__PURE__*/function (_CdkFooterRow) {\n  _inherits(MatFooterRow, _CdkFooterRow);\n\n  var _super13 = _createSuper(MatFooterRow);\n\n  function MatFooterRow() {\n    _classCallCheck(this, MatFooterRow);\n\n    return _super13.apply(this, arguments);\n  }\n\n  return MatFooterRow;\n}(CdkFooterRow);\n\nMatFooterRow.ɵfac = function MatFooterRow_Factory(t) {\n  return ɵMatFooterRow_BaseFactory(t || MatFooterRow);\n};\n\nMatFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatFooterRow,\n  selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n  exportAs: [\"matFooterRow\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkFooterRow,\n    useExisting: MatFooterRow\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [ɵngcc1.CdkCellOutlet],\n  encapsulation: 2\n});\nvar ɵMatFooterRow_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-footer-row, tr[mat-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matFooterRow',\n      providers: [{\n        provide: CdkFooterRow,\n        useExisting: MatFooterRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar MatRow = /*#__PURE__*/function (_CdkRow) {\n  _inherits(MatRow, _CdkRow);\n\n  var _super14 = _createSuper(MatRow);\n\n  function MatRow() {\n    _classCallCheck(this, MatRow);\n\n    return _super14.apply(this, arguments);\n  }\n\n  return MatRow;\n}(CdkRow);\n\nMatRow.ɵfac = function MatRow_Factory(t) {\n  return ɵMatRow_BaseFactory(t || MatRow);\n};\n\nMatRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatRow,\n  selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n  exportAs: [\"matRow\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkRow,\n    useExisting: MatRow\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [ɵngcc1.CdkCellOutlet],\n  encapsulation: 2\n});\nvar ɵMatRow_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatRow);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-row, tr[mat-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRow',\n      providers: [{\n        provide: CdkRow,\n        useExisting: MatRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar MatNoDataRow = /*#__PURE__*/function (_CdkNoDataRow) {\n  _inherits(MatNoDataRow, _CdkNoDataRow);\n\n  var _super15 = _createSuper(MatNoDataRow);\n\n  function MatNoDataRow() {\n    _classCallCheck(this, MatNoDataRow);\n\n    return _super15.apply(this, arguments);\n  }\n\n  return MatNoDataRow;\n}(CdkNoDataRow);\n\nMatNoDataRow.ɵfac = function MatNoDataRow_Factory(t) {\n  return ɵMatNoDataRow_BaseFactory(t || MatNoDataRow);\n};\n\nMatNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatNoDataRow,\n  selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNoDataRow,\n    useExisting: MatNoDataRow\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatNoDataRow_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatNoDataRow);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matNoDataRow]',\n      providers: [{\n        provide: CdkNoDataRow,\n        useExisting: MatNoDataRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar MatTextColumn = /*#__PURE__*/function (_CdkTextColumn) {\n  _inherits(MatTextColumn, _CdkTextColumn);\n\n  var _super16 = _createSuper(MatTextColumn);\n\n  function MatTextColumn() {\n    _classCallCheck(this, MatTextColumn);\n\n    return _super16.apply(this, arguments);\n  }\n\n  return MatTextColumn;\n}(CdkTextColumn);\n\nMatTextColumn.ɵfac = function MatTextColumn_Factory(t) {\n  return ɵMatTextColumn_BaseFactory(t || MatTextColumn);\n};\n\nMatTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTextColumn,\n  selectors: [[\"mat-text-column\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n  template: function MatTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n  },\n  directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell],\n  encapsulation: 2\n});\nvar ɵMatTextColumn_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTextColumn);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'mat-text-column',\n      template: \"\\n    <ng-container matColumnDef>\\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [// Table\nMatTable, // Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, // Cell directives\nMatHeaderCell, MatCell, MatFooterCell, // Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n\nvar MatTableModule = function MatTableModule() {\n  _classCallCheck(this, MatTableModule);\n};\n\nMatTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTableModule\n});\nMatTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTableModule_Factory(t) {\n    return new (t || MatTableModule)();\n  },\n  imports: [[CdkTableModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, {\n    declarations: function declarations() {\n      return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n    },\n    imports: function imports() {\n      return [CdkTableModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTableModule, MatCommonModule],\n      exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\n\nvar MatTableDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTableDataSource, _DataSource);\n\n  var _super17 = _createSuper(MatTableDataSource);\n\n  function MatTableDataSource() {\n    var _this2;\n\n    var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, MatTableDataSource);\n\n    _this2 = _super17.call(this);\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n\n    _this2._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n\n    _this2._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n\n    _this2._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n\n    _this2._renderChangesSubscription = Subscription.EMPTY;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n\n    _this2.sortingDataAccessor = function (data, sortHeaderId) {\n      var value = data[sortHeaderId];\n\n      if (_isNumberValue(value)) {\n        var numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n\n\n    _this2.sortData = function (data, sort) {\n      var active = sort.active;\n      var direction = sort.direction;\n\n      if (!active || direction == '') {\n        return data;\n      }\n\n      return data.sort(function (a, b) {\n        var valueA = _this2.sortingDataAccessor(a, active);\n\n        var valueB = _this2.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n\n\n        var valueAType = typeof valueA;\n        var valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n\n\n        var comparatorResult = 0;\n\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n\n\n    _this2.filterPredicate = function (data, filter) {\n      // Transform the data into a lowercase string of all property values.\n      var dataStr = Object.keys(data).reduce(function (currentTerm, key) {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.\n\n      var transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n\n    _this2._data = new BehaviorSubject(initialData);\n\n    _this2._updateChangeSubscription();\n\n    return _this2;\n  }\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n\n\n  _createClass(MatTableDataSource, [{\n    key: \"_updateChangeSubscription\",\n\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    value: function _updateChangeSubscription() {\n      var _this3 = this;\n\n      // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n      // The events should emit whenever the component emits a change or initializes, or if no\n      // component is provided, a stream with just a null event should be provided.\n      // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n      // pipeline can progress to the next step. Note that the value from these streams are not used,\n      // they purely act as a signal to progress in the pipeline.\n      var sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n      var pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n      var dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.\n\n      var filteredData = combineLatest([dataStream, this._filter]).pipe(map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            data = _ref2[0];\n\n        return _this3._filterData(data);\n      })); // Watch for filtered data or sort changes to provide an ordered set of data.\n\n      var orderedData = combineLatest([filteredData, sortChange]).pipe(map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            data = _ref4[0];\n\n        return _this3._orderData(data);\n      })); // Watch for ordered data or page changes to provide a paged set of data.\n\n      var paginatedData = combineLatest([orderedData, pageChange]).pipe(map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            data = _ref6[0];\n\n        return _this3._pageData(data);\n      })); // Watched for paged data changes and send the result to the table to render.\n\n      this._renderChangesSubscription.unsubscribe();\n\n      this._renderChangesSubscription = paginatedData.subscribe(function (data) {\n        return _this3._renderData.next(data);\n      });\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n\n  }, {\n    key: \"_filterData\",\n    value: function _filterData(data) {\n      var _this4 = this;\n\n      // If there is a filter string, filter out data that does not contain it.\n      // Each data object is converted to a string using the function defined by filterTermAccessor.\n      // May be overridden for customization.\n      this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(function (obj) {\n        return _this4.filterPredicate(obj, _this4.filter);\n      });\n\n      if (this.paginator) {\n        this._updatePaginator(this.filteredData.length);\n      }\n\n      return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n\n  }, {\n    key: \"_orderData\",\n    value: function _orderData(data) {\n      // If there is no active sort or direction, return the data without trying to sort.\n      if (!this.sort) {\n        return data;\n      }\n\n      return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n\n  }, {\n    key: \"_pageData\",\n    value: function _pageData(data) {\n      if (!this.paginator) {\n        return data;\n      }\n\n      var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n\n  }, {\n    key: \"_updatePaginator\",\n    value: function _updatePaginator(filteredDataLength) {\n      var _this5 = this;\n\n      Promise.resolve().then(function () {\n        var paginator = _this5.paginator;\n\n        if (!paginator) {\n          return;\n        }\n\n        paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.\n\n        if (paginator.pageIndex > 0) {\n          var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n          var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n          if (newPageIndex !== paginator.pageIndex) {\n            paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,\n            // we need our own stream so we know to should re-render the data.\n\n            _this5._internalPageChanges.next();\n          }\n        }\n      });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(data) {\n      this._data.next(data);\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n\n  }, {\n    key: \"filter\",\n    get: function get() {\n      return this._filter.value;\n    },\n    set: function set(filter) {\n      this._filter.next(filter);\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n\n  }, {\n    key: \"sort\",\n    get: function get() {\n      return this._sort;\n    },\n    set: function set(sort) {\n      this._sort = sort;\n\n      this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n\n  }, {\n    key: \"paginator\",\n    get: function get() {\n      return this._paginator;\n    },\n    set: function set(paginator) {\n      this._paginator = paginator;\n\n      this._updateChangeSubscription();\n    }\n  }]);\n\n  return MatTableDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };","map":{"version":3,"sources":["../../../../../../src/material/table/table.ts","../../../../../../src/material/table/cell.ts","../../../../../../src/material/table/row.ts","../../../../../../src/material/table/text-column.ts","../../../../../../src/material/table/table-module.ts","../../../../../../src/material/table/table-data-source.ts","../../../../../../src/material/table/public-api.ts","../../../../../../src/material/table/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TABLE_TEMPLATE,\n  CdkTable,\n  CDK_TABLE,\n  _CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {_DisposeViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY} from '@angular/cdk/collections';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n    '[class.mat-table-fixed-layout]': 'fixedLayout',\n  },\n  providers: [\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    {provide: CdkTable, useExisting: MatTable},\n    {provide: CDK_TABLE, useExisting: MatTable},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n  protected needsPositionStickyOnElement = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {Directive, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  inputs: ['sticky'],\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef')\n  get name(): string { return this._name; }\n  set name(name: string) { this._setNameInput(name); }\n\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  protected _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName!.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[matNoDataRow]',\n  providers: [{provide: CdkNoDataRow, useExisting: MatNoDataRow}],\n})\nexport class MatNoDataRow extends CdkNoDataRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef,\n  MatNoDataRow\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n  MatNoDataRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    MatCommonModule,\n  ],\n  exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === 'number') { valueA += ''; }\n        if (valueBType === 'number') { valueB += ''; }\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + 'â¬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter])\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange])\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange])\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = (this.filter == null || this.filter === '') ? data :\n        data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table-module';\nexport * from './cell';\nexport * from './table';\nexport * from './row';\nexport * from './table-data-source';\nexport * from './text-column';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}