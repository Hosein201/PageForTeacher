{"ast":null,"code":"import _createClass from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /** Whether the dialog should focus the first focusable element on open. */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nvar _MatDialogContainerBase = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(_MatDialogContainerBase, _BasePortalOutlet);\n\n  var _super = _createSuper(_MatDialogContainerBase);\n\n  function _MatDialogContainerBase(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n  /** The dialog configuration. */\n  _config, _focusMonitor) {\n    var _this;\n\n    _classCallCheck(this, _MatDialogContainerBase);\n\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusTrapFactory = _focusTrapFactory;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._config = _config;\n    _this._focusMonitor = _focusMonitor;\n    /** Emits when an animation state changes. */\n\n    _this._animationStateChanged = new EventEmitter();\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    _this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    _this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this.attachDomPortal = function (portal) {\n      if (_this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return _this._portalOutlet.attachDomPortal(portal);\n    };\n\n    _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    _this._document = _document;\n    return _this;\n  }\n  /** Initializes the dialog container with the attached content. */\n\n\n  _createClass(_MatDialogContainerBase, [{\n    key: \"_initializeWithAttachedContent\",\n    value: function _initializeWithAttachedContent() {\n      this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n\n\n      this._capturePreviouslyFocusedElement(); // Move focus onto the dialog immediately in order to prevent the user\n      // from accidentally opening multiple dialogs at the same time.\n\n\n      this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n\n  }, {\n    key: \"_recaptureFocus\",\n    value: function _recaptureFocus() {\n      if (!this._containsFocus()) {\n        var focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n        if (focusContainer) {\n          this._elementRef.nativeElement.focus();\n        }\n      }\n    }\n    /** Moves the focus inside the focus trap. */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus() {\n      // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      } else if (!this._containsFocus()) {\n        // Otherwise ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      var previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n        var activeElement = this._document.activeElement;\n        var element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          if (this._focusMonitor) {\n            this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n            this._closeInteractionType = null;\n          } else {\n            previousElement.focus();\n          }\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /** Sets up the focus trap. */\n\n  }, {\n    key: \"_setupFocusTrap\",\n    value: function _setupFocusTrap() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n\n  }, {\n    key: \"_capturePreviouslyFocusedElement\",\n    value: function _capturePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n      }\n    }\n    /** Focuses the dialog container. */\n\n  }, {\n    key: \"_focusDialogContainer\",\n    value: function _focusDialogContainer() {\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Returns whether focus is inside the dialog. */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      var element = this._elementRef.nativeElement;\n      var activeElement = this._document.activeElement;\n      return element === activeElement || element.contains(activeElement);\n    }\n  }]);\n\n  return _MatDialogContainerBase;\n}(BasePortalOutlet);\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogContainerBase,\n  viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatDialogContainerBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MatDialogConfig\n  }, {\n    type: FocusMonitor\n  }];\n};\n\n_MatDialogContainerBase.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/function (_MatDialogContainerBa) {\n  _inherits(MatDialogContainer, _MatDialogContainerBa);\n\n  var _super2 = _createSuper(MatDialogContainer);\n\n  function MatDialogContainer() {\n    var _this2;\n\n    _classCallCheck(this, MatDialogContainer);\n\n    _this2 = _super2.apply(this, arguments);\n    /** State of the dialog animation. */\n\n    _this2._state = 'enter';\n    return _this2;\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _createClass(MatDialogContainer, [{\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(_ref) {\n      var toState = _ref.toState,\n          totalTime = _ref.totalTime;\n\n      if (toState === 'enter') {\n        this._trapFocus();\n\n        this._animationStateChanged.next({\n          state: 'opened',\n          totalTime: totalTime\n        });\n      } else if (toState === 'exit') {\n        this._restoreFocus();\n\n        this._animationStateChanged.next({\n          state: 'closed',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(_ref2) {\n      var toState = _ref2.toState,\n          totalTime = _ref2.totalTime;\n\n      if (toState === 'enter') {\n        this._animationStateChanged.next({\n          state: 'opening',\n          totalTime: totalTime\n        });\n      } else if (toState === 'exit' || toState === 'void') {\n        this._animationStateChanged.next({\n          state: 'closing',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Starts the dialog exit animation. */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatDialogContainer;\n}(_MatDialogContainerBase);\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return ɵMatDialogContainer_BaseFactory(t || MatDialogContainer);\n};\n\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n      ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\nvar ɵMatDialogContainer_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_overlayRef, _containerInstance) {\n    var _this3 = this;\n\n    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'opened';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'closed';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance = null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    })).subscribe(function (event) {\n      event.preventDefault();\n\n      _closeDialogVia(_this3, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(function () {\n      if (_this3.disableClose) {\n        _this3._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(_this3, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.state === 'closing';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._state = 1\n      /* CLOSING */\n      ;\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._getPositionStrategy().width(width).height(height);\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._overlayRef.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._overlayRef.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* CLOSED */\n      ;\n\n      this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return this._overlayRef.getConfig().positionStrategy;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nvar _MatDialogBase = /*#__PURE__*/function () {\n  function _MatDialogBase(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n    var _this5 = this;\n\n    _classCallCheck(this, _MatDialogBase);\n\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  _createClass(_MatDialogBase, [{\n    key: \"_getAfterAllClosed\",\n    value: function _getAfterAllClosed() {\n      var parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n  }, {\n    key: \"open\",\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n      }\n\n      var overlayRef = this._createOverlay(config);\n\n      var dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n      var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(function () {\n        return _this6._removeOpenDialog(dialogRef);\n      });\n      this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n      dialogContainer._initializeWithAttachedContent();\n\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      var overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(dialogConfig) {\n      var state = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n\n  }, {\n    key: \"_attachDialogContainer\",\n    value: function _attachDialogContainer(overlay, config) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      var injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatDialogConfig,\n          useValue: config\n        }]\n      });\n      var containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n      var containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n  }, {\n    key: \"_attachDialogContent\",\n    value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n      var dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n          $implicit: config.data,\n          dialogRef: dialogRef\n        }));\n      } else {\n        var injector = this._createInjector(config, dialogRef, dialogContainer);\n\n        var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, dialogRef, dialogContainer) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n      // content are created out of the same `ViewContainerRef` and as such, are siblings\n      // for injector purposes. To allow the hierarchy that is expected, the dialog\n      // container is explicitly provided in the injector.\n\n      var providers = [{\n        provide: this._dialogContainerType,\n        useValue: dialogContainer\n      }, {\n        provide: this._dialogDataToken,\n        useValue: config.data\n      }, {\n        provide: this._dialogRefConstructor,\n        useValue: dialogRef\n      }];\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n        providers.push({\n          provide: Directionality,\n          useValue: {\n            value: config.direction,\n            change: of()\n          }\n        });\n      }\n\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: providers\n      });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n\n  }, {\n    key: \"_removeOpenDialog\",\n    value: function _removeOpenDialog(dialogRef) {\n      var index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(function (previousValue, element) {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n\n  }, {\n    key: \"_hideNonDialogContentFromAssistiveTechnology\",\n    value: function _hideNonDialogContentFromAssistiveTechnology() {\n      var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        var siblings = overlayContainer.parentElement.children;\n\n        for (var i = siblings.length - 1; i > -1; i--) {\n          var sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /** Closes all of the dialogs in an array. */\n\n  }, {\n    key: \"_closeDialogs\",\n    value: function _closeDialogs(dialogs) {\n      var i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n  }, {\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n  }]);\n\n  return _MatDialogBase;\n}();\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken));\n};\n\n_MatDialogBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogBase\n});\n\n_MatDialogBase.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: undefined\n  }, {\n    type: undefined\n  }, {\n    type: OverlayContainer\n  }, {\n    type: undefined\n  }, {\n    type: Type\n  }, {\n    type: Type\n  }, {\n    type: InjectionToken\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.InjectionToken\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nvar MatDialog = /*#__PURE__*/function (_MatDialogBase2) {\n  _inherits(MatDialog, _MatDialogBase2);\n\n  var _super3 = _createSuper(MatDialog);\n\n  function MatDialog(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n    _classCallCheck(this, MatDialog);\n\n    return _super3.call(this, overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n  }\n\n  return MatDialog;\n}(_MatDialogBase);\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\nMatDialog.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatDialogConfig,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DIALOG_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: MatDialog,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: OverlayContainer\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/function () {\n  function MatDialogClose( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogClose);\n\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  _createClass(MatDialogClose, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick(event) {\n      // Determinate the focus origin using the click event, because using the FocusMonitor will\n      // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n      // dialog, and therefore clicking the button won't result in a focus change. This means that\n      // the FocusMonitor won't detect any origin change, and will always output `program`.\n      _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n  }]);\n\n  return MatDialogClose;\n}();\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatDialogClose.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  type: [{\n    type: Input\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/function () {\n  function MatDialogTitle( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogTitle);\n\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n  }\n\n  _createClass(MatDialogTitle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (!this._dialogRef) {\n        this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(function () {\n          var container = _this7._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = _this7.id;\n          }\n        });\n      }\n    }\n  }]);\n\n  return MatDialogTitle;\n}();\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\nMatDialogTitle.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = function MatDialogContent() {\n  _classCallCheck(this, MatDialogContent);\n};\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = function MatDialogActions() {\n  _classCallCheck(this, MatDialogActions);\n};\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule = function MatDialogModule() {\n  _classCallCheck(this, MatDialogModule);\n};\n\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  },\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["../../../../../../src/material/dialog/dialog-config.ts","../../../../../../src/material/dialog/dialog-animations.ts","../../../../../../src/material/dialog/dialog-container.ts","../../../../../../src/material/dialog/dialog-ref.ts","../../../../../../src/material/dialog/dialog.ts","../../../../../../src/material/dialog/dialog-content-directives.ts","../../../../../../src/material/dialog/dialog-module.ts","../../../../../../src/material/dialog/public-api.ts","../../../../../../src/material/dialog/index.ts"],"names":["observableOf"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACG;AACF;;;;;;;;;;IAwBY,e,GAAb,2BAAA;AAAA;;AAAgB;AAcd,OAAA,IAAA,GAAoB,QAApB;AACF;;AAEE,OAAA,UAAA,GAAiC,EAAjC;AACF;;AAEE,OAAA,WAAA,GAAwB,IAAxB;AACF;;AAEE,OAAA,aAAA,GAAoC,EAApC;AACF;;AAEE,OAAA,YAAA,GAAyB,KAAzB;AACF;;AAEE,OAAA,KAAA,GAAiB,EAAjB;AACF;;AAEE,OAAA,MAAA,GAAkB,EAAlB;AACF;;AAQE,OAAA,QAAA,GAA6B,MAA7B;AACF;;AAQE,OAAA,IAAA,GAAkB,IAAlB;AACF;;AAKE,OAAA,eAAA,GAAkC,IAAlC;AACF;;AAEE,OAAA,cAAA,GAAiC,IAAjC;AACF;;AAEE,OAAA,SAAA,GAA4B,IAA5B;AACF;;AAEE,OAAA,SAAA,GAAsB,IAAtB;AACF;AAEK;AACM;AAEA;;AAAT,OAAA,YAAA,GAAyB,IAAzB;AACF;AACW;AAID;AACO;AAAwC;;AAGvD,OAAA,iBAAA,GAA8B,IAA9B,CAjFF,CAkFA;AAKC,C;ACxHD;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;;;AACA,IAAa,mBAAmB,GAE5B;AACJ;AACE,EAAA,eAAe,EAAE,OAAO,CAAC,iBAAD,EAAoB,CAC9C;AACI;AACI;AACJ,EAAA,KAAK,CAAC,YAAD,EAAe,KAAK,CAAC;AAAC,IAAA,OAAO,EAAE,CAAV;AAAa,IAAA,SAAS,EAAE;AAAxB,GAAD,CAApB,CAJqC,EAK1C,KAAK,CAAC,OAAD,EAAU,KAAK,CAAC;AAAC,IAAA,SAAS,EAAE;AAAZ,GAAD,CAAf,CALqC,EAM1C,UAAU,CAAC,YAAD,EAAe,OAAO,CAAC,kCAAD,EAC5B,KAAK,CAAC;AAAC,IAAA,SAAS,EAAE,MAAZ;AAAoB,IAAA,OAAO,EAAE;AAA7B,GAAD,CADuB,CAAtB,CANgC,EAQ1C,UAAU,CAAC,sBAAD,EACN,OAAO,CAAC,qCAAD,EAAwC,KAAK,CAAC;AAAC,IAAA,OAAO,EAAE;AAAV,GAAD,CAA7C,CADD,CARgC,CAApB;AAFtB,CAFJ;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACA;;AACA,SAAgB,yCAAhB,GAAyD;AACvD,QAAM,KAAK,CAAC,uEAAD,CAAX;AACD;AACD;AACG;AAC0E;AACL;;;IAGlD,uB;;;;;AA4BpB,mCACY,WADZ,EAEY,iBAFZ,EAGY,kBAHZ,EAIgC,SAJhC;AAKD;AACU,EAAA,OANT,EAOU,aAPV,EAOsC;AAAA;;AAAA;;AAEpC;AARU,UAAA,WAAA,GAAA,WAAA;AACA,UAAA,iBAAA,GAAA,iBAAA;AACA,UAAA,kBAAA,GAAA,kBAAA;AAGH,UAAA,OAAA,GAAA,OAAA;AACC,UAAA,aAAA,GAAA,aAAA;AAA6B;;AAzBvC,UAAA,sBAAA,GAAyB,IAAI,YAAJ,EAAzB;AACF;;AAEU,UAAA,oCAAA,GAA2D,IAA3D;AACV;AAEK;AACM;AACM;AAEA;;AAAf,UAAA,qBAAA,GAA0C,IAA1C;AACF;AACW;AAA0D;AAG/D;AACQ;AAGI;;AAyDhB,UAAA,eAAA,GAAkB,UAAC,MAAD,EAAkB;AAClC,UAAI,MAAK,aAAL,CAAmB,WAAnB,OAAqC,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAzE,CAAJ,EAAyF;AACvF,QAAA,yCAAyC;AAC1C;;AAED,aAAO,MAAK,aAAL,CAAmB,eAAnB,CAAmC,MAAnC,CAAP;AACD,KAND;;AAhDE,UAAK,eAAL,GAAuB,OAAO,CAAC,cAAR,IAA0B,IAAjD;AACA,UAAK,SAAL,GAAiB,SAAjB;AAJoC;AAKrC;AACH;;;;;qDAKgC;AAC5B,WAAK,eAAL,GAD4B,CAEhC;AACI;;;AACA,WAAK,gCAAL,GAJ4B,CAKhC;AACI;;;AACA,WAAK,qBAAL;AACD;AACH;AAEC;AACE;AACE;;;;0CACsB,M,EAA0B;AACjD,UAAI,KAAK,aAAL,CAAmB,WAAnB,OAAqC,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAzE,CAAJ,EAAyF;AACvF,QAAA,yCAAyC;AAC1C;;AAED,aAAO,KAAK,aAAL,CAAmB,qBAAnB,CAAyC,MAAzC,CAAP;AACD;AACH;AAEC;AACE;AACE;;;;yCACqB,M,EAAyB;AAC/C,UAAI,KAAK,aAAL,CAAmB,WAAnB,OAAqC,OAAO,SAAP,KAAqB,WAArB,IAAoC,SAAzE,CAAJ,EAAyF;AACvF,QAAA,yCAAyC;AAC1C;;AAED,aAAO,KAAK,aAAL,CAAmB,oBAAnB,CAAwC,MAAxC,CAAP;AACD;AACH;;;;sCAgBiB;AACb,UAAI,CAAC,KAAK,cAAL,EAAL,EAA4B;AAC1B,YAAM,cAAc,GAAG,CAAC,KAAK,OAAL,CAAa,SAAd,IAA2B,CAAC,KAAK,UAAL,CAAgB,mBAAhB,EAAnD;;AAEA,YAAI,cAAJ,EAAoB;AAClB,eAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B;AACD;AACF;AACF;AACH;;;;iCAEsB;AACtB;AACI;AACI;AACJ,UAAI,KAAK,OAAL,CAAa,SAAjB,EAA4B;AAC1B,aAAK,UAAL,CAAgB,4BAAhB;AACD,OAFD,MAEO,IAAI,CAAC,KAAK,cAAL,EAAL,EAA4B;AACvC;AACM;AACM;AACM;AACM;AAClB,aAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B;AACD;AACF;AACH;;;;oCAEyB;AACrB,UAAM,eAAe,GAAG,KAAK,oCAA7B,CADqB,CAEzB;;AAEI,UAAI,KAAK,OAAL,CAAa,YAAb,IAA6B,eAA7B,IACA,OAAO,eAAe,CAAC,KAAvB,KAAiC,UADrC,EACiD;AAC/C,YAAM,aAAa,GAAG,KAAK,SAAL,CAAe,aAArC;AACA,YAAM,OAAO,GAAG,KAAK,WAAL,CAAiB,aAAjC,CAF+C,CAGrD;AAEK;AACM;AACM;;AACX,YAAI,CAAC,aAAD,IAAkB,aAAa,KAAK,KAAK,SAAL,CAAe,IAAnD,IAA2D,aAAa,KAAK,OAA7E,IACA,OAAO,CAAC,QAAR,CAAiB,aAAjB,CADJ,EACqC;AACnC,cAAI,KAAK,aAAT,EAAwB;AACtB,iBAAK,aAAL,CAAmB,QAAnB,CAA4B,eAA5B,EAA6C,KAAK,qBAAlD;;AACA,iBAAK,qBAAL,GAA6B,IAA7B;AACD,WAHD,MAGO;AACL,YAAA,eAAe,CAAC,KAAhB;AACD;AACF;AACF;;AAED,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,UAAL,CAAgB,OAAhB;AACD;AACF;AACH;;;;sCAEyB;AACrB,WAAK,UAAL,GAAkB,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,KAAK,WAAL,CAAiB,aAA/C,CAAlB;AACD;AACH;;;;uDAE0C;AACtC,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,oCAAL,GAA4C,KAAK,SAAL,CAAe,aAA3D;AACD;AACF;AACH;;;;4CAE+B;AAC/B;AACI,UAAI,KAAK,WAAL,CAAiB,aAAjB,CAA+B,KAAnC,EAA0C;AACxC,aAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B;AACD;AACF;AACH;;;;qCAEwB;AACpB,UAAM,OAAO,GAAG,KAAK,WAAL,CAAiB,aAAjC;AACA,UAAM,aAAa,GAAG,KAAK,SAAL,CAAe,aAArC;AACA,aAAO,OAAO,KAAK,aAAZ,IAA6B,OAAO,CAAC,QAAR,CAAiB,aAAjB,CAApC;AACD;;;;EAjLmD,gB;;wCADrD,+B,CAAS,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,uBAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,QAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,eAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,YAAA,CAAA,CAAA;AAAA,C;;;;;;;;;;;;;;;oBACR,0B;;;AAAC,uBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAiD;AAAA,IAAA,IAAA,EA/BlD;AA+BkD,GAAjD,EA9BD;AAAA,IAAA,IAAA,EAhB4C;AAgB5C,GA8BC,EA9C+D;AAAA,IAAA,IAAA,EAWhE;AAXgE,GA8C/D,EAlCD;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAkEG;AAlEH,KAAA,EAkEW;AAAA,MAAA,IAAA,EAAI,MAAJ;AAAU,MAAA,IAAA,EAAA,CAAC,QAAD;AAAV,KAlEX;AAAA,GAkCC,EAgCsC;AAAA,IAAA,IAAA,EAtDjC;AAsDiC,GAhCtC,EAtBwB;AAAA,IAAA,IAAA,EAxBnB;AAwBmB,GAsBxB,CAAA;AAAA,CAAA;;AA9CuB,uBAAA,CAAA,cAAA,GAAA;AAA2C,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAkDlE,SAlDkE;AAkDzD,IAAA,IAAA,EAAA,CAAC,eAAD,EAAkB;AAAC,MAAA,MAAM,EAAE;AAAT,KAAlB;AAlDyD,GAAA;AAA3C,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkD0B,C;AAAC;AAAI;AAEhB;AAGnB;AAAiB;;;IAuM1B,kB;;;;;AAvBb,gCAAA;AAAA;;AAAA;;AACG,iCAAA,SAAA;AAA6B;;AAwB9B,WAAA,MAAA,GAAoC,OAApC;AAzBF;AAuDC;AACD;;;;;2CA5BuD;AAAA,UAAnC,OAAmC,QAAnC,OAAmC;AAAA,UAA1B,SAA0B,QAA1B,SAA0B;;AACnD,UAAI,OAAO,KAAK,OAAhB,EAAyB;AACvB,aAAK,UAAL;;AACA,aAAK,sBAAL,CAA4B,IAA5B,CAAiC;AAAC,UAAA,KAAK,EAAE,QAAR;AAAkB,UAAA,SAAS,EAAT;AAAlB,SAAjC;AACD,OAHD,MAGO,IAAI,OAAO,KAAK,MAAhB,EAAwB;AAC7B,aAAK,aAAL;;AACA,aAAK,sBAAL,CAA4B,IAA5B,CAAiC;AAAC,UAAA,KAAK,EAAE,QAAR;AAAkB,UAAA,SAAS,EAAT;AAAlB,SAAjC;AACD;AACF;AACH;;;;6CAEwD;AAAA,UAAnC,OAAmC,SAAnC,OAAmC;AAAA,UAA1B,SAA0B,SAA1B,SAA0B;;AACpD,UAAI,OAAO,KAAK,OAAhB,EAAyB;AACvB,aAAK,sBAAL,CAA4B,IAA5B,CAAiC;AAAC,UAAA,KAAK,EAAE,SAAR;AAAmB,UAAA,SAAS,EAAT;AAAnB,SAAjC;AACD,OAFD,MAEO,IAAI,OAAO,KAAK,MAAZ,IAAsB,OAAO,KAAK,MAAtC,EAA8C;AACnD,aAAK,sBAAL,CAA4B,IAA5B,CAAiC;AAAC,UAAA,KAAK,EAAE,SAAR;AAAmB,UAAA,SAAS,EAAT;AAAnB,SAAjC;AACD;AACF;AACH;;;;0CAEqB;AACjB,WAAK,MAAL,GAAc,MAAd,CADiB,CAErB;AAEG;;AACC,WAAK,kBAAL,CAAwB,YAAxB;AACD;;;;EA/BqC,uB;;mCAvBvC,0B,CAAS,C,EAAC;AAAA,SAAA,+BACC,CAAA,CAAA,IAAA,kBAAA,CADD;AAET,C;;;AAAoC,EAAA,IAAA,EAAA,kB;AAEpC,EAAA,SAAe,EAAA,CAAA,CAAA,sBAAA,CAAA,C;AAAsB,EAAA,SAAA,EAAA,CAAA,UAAA,EAAA,IAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EAAA,sBAAA,C;AAAA,EAAA,QAAA,EAAA,C;AAAA,EAAA,YAAA,EAAA,SAAA,+BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AAGrC,MAAA,MAAA,CAAA,uBAAA,CAAiB,wBAAjB,EAAgD,SAAA,qEAAA,CAEhD,MAFgD,EAE1C;AAAA,eAAA,GAAA,CAAA,iBAAA,CACK,MADL,CAAA;AACK,OAHX,EAGW,uBAHX,EAGiC,SAC/B,oEAD+B,CAEX,MAFW,EAG/B;AAAA,eAAQ,GAAK,CAAA,gBAAL,CAAK,MAAL,CAAR;AACA,OAPF;AAOe;;AAAE,QAAA,EAAA,GAAA,CAAA,EAAA;AAAc,MAAA,MAAA,CAAA,cAAA,CAC7B,IAD6B,EAC7B,GAAA,CAAA,GAD6B;AACH,MAAA,MAAA,CAAA,WAAA,CAAA,MAAA,EAAA,GAAA,CAAA,OAAA,CAA4C,IAA5C,EAA4C,iBAA5C,EAC1B,GAAA,CAAA,OAAA,CAAA,SAAA,GAAqB,IAArB,GAAqB,GAAA,CAAA,eADK,EACc,YADd,EAE1B,GAAA,CAAA,OAAA,CAAA,SAF0B,EAEC,kBAFD,EAEC,GAAA,CAAA,OAAA,CAAiC,eAAjC,IAC3B,IAH0B;AAGN,MAAA,MAAA,CAAE,uBAAF,CAAU,kBAAV,EACpB,GAAA,CAAA,MADoB;AACQ;AAAA,G;AAAA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA,C;AAC5B,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAyB,EAAA,MAAE,EAAA,CAAA,CAAA,iBAAA,EAA0B,EAA1B,CAAA,C;AAA0B,EAAA,QAAA,EAAA,SACtD,2BADsD,CACtD,EADsD,EACtD,GADsD,EACtD;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;WACF,28B;AAAA,EAAA,aAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA;AAAA,IAAA,SAAA,EAAA,CAAA,mBAAA,CAAA,eAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACI,C;ACvQL;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;;;AAEA,IAAI,QAAQ,GAAG,CAAf;AACA;AACG;AACM;;IAKI,Y;AAyBX,wBACU,WADV,EAES,kBAFT,EAGkD;AAAA;;AAAA,QAAvC,EAAuC,4FAAZ,QAAQ,EAAI;;AAAA;;AAFxC,SAAA,WAAA,GAAA,WAAA;AACD,SAAA,kBAAA,GAAA,kBAAA;AACE,SAAA,EAAA,GAAA,EAAA;AAAwC;;AAvBnD,SAAA,YAAA,GAAoC,KAAK,kBAAL,CAAwB,OAAxB,CAAgC,YAApE;AACF;;AAEmB,SAAA,YAAA,GAAe,IAAI,OAAJ,EAAf;AACnB;;AAEmB,SAAA,YAAA,GAAe,IAAI,OAAJ,EAAf;AACnB;;AAEmB,SAAA,aAAA,GAAgB,IAAI,OAAJ,EAAhB;AACnB;;AAQU,SAAA,MAAA,GAAM;AAAA;AAAN,KAK0C,CAJpD;;AAOI,IAAA,kBAAkB,CAAC,GAAnB,GAAyB,EAAzB,CAHgD,CAIpD;;AAEI,IAAA,kBAAkB,CAAC,sBAAnB,CAA0C,IAA1C,CACE,MAAM,CAAC,UAAA,KAAK;AAAA,aAAI,KAAK,CAAC,KAAN,KAAgB,QAApB;AAAA,KAAN,CADR,EAEE,IAAI,CAAC,CAAD,CAFN,EAIC,SAJD,CAIW,YAAA;AACT,MAAA,MAAI,CAAC,YAAL,CAAkB,IAAlB;;AACA,MAAA,MAAI,CAAC,YAAL,CAAkB,QAAlB;AACD,KAPD,EANgD,CAcpD;;;AAEI,IAAA,kBAAkB,CAAC,sBAAnB,CAA0C,IAA1C,CACE,MAAM,CAAC,UAAA,KAAK;AAAA,aAAI,KAAK,CAAC,KAAN,KAAgB,QAApB;AAAA,KAAN,CADR,EAEE,IAAI,CAAC,CAAD,CAFN,EAGE,SAHF,CAGY,YAAA;AACV,MAAA,YAAY,CAAC,MAAI,CAAC,qBAAN,CAAZ;;AACA,MAAA,MAAI,CAAC,kBAAL;AACD,KAND;;AAQA,IAAA,WAAW,CAAC,WAAZ,GAA0B,SAA1B,CAAoC,YAAA;AAClC,MAAA,MAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,MAAI,CAAC,OAA7B;;AACA,MAAA,MAAI,CAAC,aAAL,CAAmB,QAAnB;;AACA,MAAA,MAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,MAAI,CAAC,OAA5B;;AACA,MAAA,MAAI,CAAC,YAAL,CAAkB,QAAlB;;AACA,MAAA,MAAI,CAAC,iBAAL,GAAyB,IAAzB;;AACA,MAAA,MAAI,CAAC,WAAL,CAAiB,OAAjB;AACD,KAPD;;AASA,IAAA,WAAW,CAAC,aAAZ,GACG,IADH,CACQ,MAAM,CAAC,UAAA,KAAK,EAAA;AAChB,aAAO,KAAK,CAAC,OAAN,KAAkB,MAAlB,IAA4B,CAAC,MAAI,CAAC,YAAlC,IAAkD,CAAC,cAAc,CAAC,KAAD,CAAxE;AACD,KAFW,CADd,EAIG,SAJH,CAIa,UAAA,KAAK,EAAA;AACd,MAAA,KAAK,CAAC,cAAN;;AACA,MAAA,eAAe,CAAC,MAAD,EAAO,UAAP,CAAf;AACD,KAPH;;AASA,IAAA,WAAW,CAAC,aAAZ,GAA4B,SAA5B,CAAsC,YAAA;AACpC,UAAI,MAAI,CAAC,YAAT,EAAuB;AACrB,QAAA,MAAI,CAAC,kBAAL,CAAwB,eAAxB;AACD,OAFD,MAEO;AACL,QAAA,eAAe,CAAC,MAAD,EAAO,OAAP,CAAf;AACD;AACF,KAND;AAOD;AACH;AAEC;AACE;AACE;;;;;0BACG,Y,EAAgB;AAAA;;AACpB,WAAK,OAAL,GAAe,YAAf,CADoB,CAExB;;AAEI,WAAK,kBAAL,CAAwB,sBAAxB,CAA+C,IAA/C,CACE,MAAM,CAAC,UAAA,KAAK;AAAA,eAAI,KAAK,CAAC,KAAN,KAAgB,SAApB;AAAA,OAAN,CADR,EAEE,IAAI,CAAC,CAAD,CAFN,EAIC,SAJD,CAIW,UAAA,KAAK,EAAA;AACd,QAAA,MAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,YAAxB;;AACA,QAAA,MAAI,CAAC,aAAL,CAAmB,QAAnB;;AACA,QAAA,MAAI,CAAC,WAAL,CAAiB,cAAjB,GAHc,CAIpB;AAEK;AACM;AACM;AACM;;;AACjB,QAAA,MAAI,CAAC,qBAAL,GAA6B,UAAU,CAAC;AAAA,iBAAM,MAAI,CAAC,kBAAL,EAAN;AAAA,SAAD,EACnC,KAAK,CAAC,SAAN,GAAkB,GADiB,CAAvC;AAED,OAhBD;;AAkBA,WAAK,MAAL,GAAW;AAAA;AAAX;;AACA,WAAK,kBAAL,CAAwB,mBAAxB;AACD;AACH;AAEC;AACE;;;;kCACU;AACT,aAAO,KAAK,YAAZ;AACD;AACH;AAEC;AACE;;;;kCACU;AACT,aAAO,KAAK,YAAZ;AACD;AACH;AAEC;AACE;;;;mCACW;AACV,aAAO,KAAK,aAAZ;AACD;AACH;AAEC;AACE;;;;oCACY;AACX,aAAO,KAAK,WAAL,CAAiB,aAAjB,EAAP;AACD;AACH;AAEC;AACE;;;;oCACY;AACX,aAAO,KAAK,WAAL,CAAiB,aAAjB,EAAP;AACD;AACH;AAEC;AACE;AACE;;;;mCACY,Q,EAAyB;AACtC,UAAI,QAAQ,GAAG,KAAK,oBAAL,EAAf;;AAEA,UAAI,QAAQ,KAAK,QAAQ,CAAC,IAAT,IAAiB,QAAQ,CAAC,KAA/B,CAAZ,EAAmD;AACjD,QAAA,QAAQ,CAAC,IAAT,GAAgB,QAAQ,CAAC,IAAT,CAAc,QAAQ,CAAC,IAAvB,CAAhB,GAA+C,QAAQ,CAAC,KAAT,CAAe,QAAQ,CAAC,KAAxB,CAA/C;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC,kBAAT;AACD;;AAED,UAAI,QAAQ,KAAK,QAAQ,CAAC,GAAT,IAAgB,QAAQ,CAAC,MAA9B,CAAZ,EAAmD;AACjD,QAAA,QAAQ,CAAC,GAAT,GAAe,QAAQ,CAAC,GAAT,CAAa,QAAQ,CAAC,GAAtB,CAAf,GAA4C,QAAQ,CAAC,MAAT,CAAgB,QAAQ,CAAC,MAAzB,CAA5C;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC,gBAAT;AACD;;AAED,WAAK,WAAL,CAAiB,cAAjB;;AAEA,aAAO,IAAP;AACD;AACH;AAEC;AACE;AACE;AAEJ;;;;iCAAmD;AAAA,UAAvC,KAAuC,uEAAvB,EAAuB;AAAA,UAAnB,MAAmB,uEAAF,EAAE;;AAChD,WAAK,oBAAL,GAA4B,KAA5B,CAAkC,KAAlC,EAAyC,MAAzC,CAAgD,MAAhD;;AACA,WAAK,WAAL,CAAiB,cAAjB;;AACA,aAAO,IAAP;AACD;AACH;;;;kCAEgB,O,EAA0B;AACtC,WAAK,WAAL,CAAiB,aAAjB,CAA+B,OAA/B;;AACA,aAAO,IAAP;AACD;AACH;;;;qCAEmB,O,EAA0B;AACzC,WAAK,WAAL,CAAiB,gBAAjB,CAAkC,OAAlC;;AACA,aAAO,IAAP;AACD;AACH;;;;+BAEU;AACN,aAAO,KAAK,MAAZ;AACD;AACH;AAEC;AACE;AACE;;;;yCACuB;AACxB,WAAK,MAAL,GAAW;AAAA;AAAX;;AACA,WAAK,WAAL,CAAiB,OAAjB;AACD;AACH;;;;2CAE8B;AAC1B,aAAO,KAAK,WAAL,CAAiB,SAAjB,GAA6B,gBAApC;AACD;;;;;AAEH;AACG;AACoF;AACC;AACK;AAC1F;;;AAEH,SAAgB,eAAhB,CAAmC,GAAnC,EAAyD,eAAzD,EAAuF,MAAvF,EAAiG;AACjG;AACE;AACA,MAAI,GAAG,CAAC,kBAAJ,KAA2B,SAA/B,EAA0C;AACxC,IAAA,GAAG,CAAC,kBAAJ,CAAuB,qBAAvB,GAA+C,eAA/C;AACD;;AACD,SAAO,GAAG,CAAC,KAAJ,CAAU,MAAV,CAAP;AACD;AC5PD;AACA;AACA;AACA;AACA;AACA;AACA;;AAgCA;;;AACA,IAAa,eAAe,GAAG,IAAI,cAAJ,CAAwB,eAAxB,CAA/B;AACA;;AAEA,IAAa,0BAA0B,GACnC,IAAI,cAAJ,CAAoC,4BAApC,CADJ;AAEA;;AAEA,IAAa,0BAA0B,GACnC,IAAI,cAAJ,CAAyC,4BAAzC,CADJ;AAEA;;AAEA,SAAgB,kCAAhB,CAAmD,OAAnD,EAAmE;AACjE,SAAO;AAAA,WAAM,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAN;AAAA,GAAP;AACD;AACD;;;AAEA,SAAgB,2CAAhB,CAA4D,OAA5D,EAA4E;AAE1E,SAAO;AAAA,WAAM,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAN;AAAA,GAAP;AACD;AACD;;;AAEA,IAAa,mCAAmC,GAAG;AACjD,EAAA,OAAO,EAAE,0BADwC;AAEjD,EAAA,IAAI,EAAE,CAAC,OAAD,CAF2C;AAGjD,EAAA,UAAU,EAAE;AAHqC,CAAnD;AAKA;AACG;AAC8D;AACJ;;IAGvC,c;AA+BpB,0BACY,QADZ,EAEY,SAFZ,EAGY,eAHZ,EAIY,aAJZ,EAKY,iBALZ,EAMI,cANJ,EAOY,qBAPZ,EAQY,oBARZ,EASY,gBATZ,EASiD;AAAA;;AAAA;;AARrC,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AAEA,SAAA,qBAAA,GAAA,qBAAA;AACA,SAAA,oBAAA,GAAA,oBAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AAvCJ,SAAA,uBAAA,GAA+C,EAA/C;AACS,SAAA,0BAAA,GAA6B,IAAI,OAAJ,EAA7B;AACA,SAAA,uBAAA,GAA0B,IAAI,OAAJ,EAA1B;AACT,SAAA,mBAAA,GAAsB,IAAI,GAAJ,EAAtB,CAoCyC,CAnCnD;;AAEiC;AAAY;AAEtB;AAGtB;;AAeU,SAAA,cAAA,GAAmC,KAAK,CAAC;AAAA,aAAM,MAAI,CAAC,WAAL,CAAiB,MAAjB,GACpD,MAAI,CAAC,kBAAL,EADoD,GAEpD,MAAI,CAAC,kBAAL,GAA0B,IAA1B,CAA+B,SAAS,CAAC,SAAD,CAAxC,CAF8C;AAAA,KAAD,CAAxC;AAcP,SAAK,eAAL,GAAuB,cAAvB;AACD;AACH;;;;;yCA1BoB;AAChB,UAAM,MAAM,GAAG,KAAK,aAApB;AACA,aAAO,MAAM,GAAG,MAAM,CAAC,kBAAP,EAAH,GAAiC,KAAK,0BAAnD;AACD;;;yBA6CyB,sB,EACA,M,EAA2B;AAAA;;AACnD,MAAA,MAAM,GAAG,oBAAoB,CAAC,MAAD,EAAS,KAAK,eAAL,IAAwB,IAAI,eAAJ,EAAjC,CAA7B;;AAEA,UAAI,MAAM,CAAC,EAAP,IAAa,KAAK,aAAL,CAAmB,MAAM,CAAC,EAA1B,CAAb,KACD,OAAO,SAAP,KAAqB,WAArB,IAAoC,SADnC,CAAJ,EACmD;AACjD,cAAM,KAAK,4BAAoB,MAAM,CAAC,EAA3B,sDAAX;AACD;;AAED,UAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,MAApB,CAAnB;;AACA,UAAM,eAAe,GAAG,KAAK,sBAAL,CAA4B,UAA5B,EAAwC,MAAxC,CAAxB;;AACA,UAAM,SAAS,GAAG,KAAK,oBAAL,CAAgC,sBAAhC,EACgC,eADhC,EAEgC,UAFhC,EAGgC,MAHhC,CAAlB,CAVmD,CAcvD;;;AAEI,UAAI,CAAC,KAAK,WAAL,CAAiB,MAAtB,EAA8B;AAC5B,aAAK,4CAAL;AACD;;AAED,WAAK,WAAL,CAAiB,IAAjB,CAAsB,SAAtB;AACA,MAAA,SAAS,CAAC,WAAV,GAAwB,SAAxB,CAAkC;AAAA,eAAM,MAAI,CAAC,iBAAL,CAAuB,SAAvB,CAAN;AAAA,OAAlC;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,SAAtB,EAtBmD,CAuBvD;;AAEI,MAAA,eAAe,CAAC,8BAAhB;;AAEA,aAAO,SAAP;AACD;AACH;AAEC;AACE;;;;+BACO;AACN,WAAK,aAAL,CAAmB,KAAK,WAAxB;AACD;AACH;AAEC;AACE;AACE;;;;kCACW,E,EAAU;AACtB,aAAO,KAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAA,MAAM;AAAA,eAAI,MAAM,CAAC,EAAP,KAAc,EAAlB;AAAA,OAA5B,CAAP;AACD;;;kCAEU;AACb;AACI;AACA,WAAK,aAAL,CAAmB,KAAK,uBAAxB;;AACA,WAAK,0BAAL,CAAgC,QAAhC;;AACA,WAAK,uBAAL,CAA6B,QAA7B;AACD;AACH;AAEC;AACE;AACE;AAEJ;;;;mCAAwB,M,EAAuB;AAC5C,UAAM,aAAa,GAAG,KAAK,iBAAL,CAAuB,MAAvB,CAAtB;;AACA,aAAO,KAAK,QAAL,CAAc,MAAd,CAAqB,aAArB,CAAP;AACD;AACH;AAEC;AACE;AACE;AAEJ;;;;sCAA2B,Y,EAA6B;AACrD,UAAM,KAAK,GAAG,IAAI,aAAJ,CAAkB;AAC9B,QAAA,gBAAgB,EAAE,KAAK,QAAL,CAAc,QAAd,GAAyB,MAAzB,EADY;AAE9B,QAAA,cAAc,EAAE,YAAY,CAAC,cAAb,IAA+B,KAAK,eAAL,EAFjB;AAG9B,QAAA,UAAU,EAAE,YAAY,CAAC,UAHK;AAI9B,QAAA,WAAW,EAAE,YAAY,CAAC,WAJI;AAK9B,QAAA,SAAS,EAAE,YAAY,CAAC,SALM;AAM9B,QAAA,QAAQ,EAAE,YAAY,CAAC,QANO;AAO9B,QAAA,SAAS,EAAE,YAAY,CAAC,SAPM;AAQ9B,QAAA,QAAQ,EAAE,YAAY,CAAC,QARO;AAS9B,QAAA,SAAS,EAAE,YAAY,CAAC,SATM;AAU9B,QAAA,mBAAmB,EAAE,YAAY,CAAC;AAVJ,OAAlB,CAAd;;AAaA,UAAI,YAAY,CAAC,aAAjB,EAAgC;AAC9B,QAAA,KAAK,CAAC,aAAN,GAAsB,YAAY,CAAC,aAAnC;AACD;;AAED,aAAO,KAAP;AACD;AACH;AAEC;AACE;AACE;AACE;AAEJ;;;;2CAA8B,O,EAAqB,M,EAAuB;AACzE,UAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAjB,IAAqC,MAAM,CAAC,gBAAP,CAAwB,QAAlF;AACA,UAAM,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB;AAC/B,QAAA,MAAM,EAAE,YAAY,IAAI,KAAK,SADE;AAE/B,QAAA,SAAS,EAAE,CAAC;AAAC,UAAA,OAAO,EAAE,eAAV;AAA2B,UAAA,QAAQ,EAAE;AAArC,SAAD;AAFoB,OAAhB,CAAjB;AAKA,UAAM,eAAe,GAAG,IAAI,eAAJ,CAAoB,KAAK,oBAAzB,EACpB,MAAM,CAAC,gBADa,EACK,QADL,EACe,MAAM,CAAC,wBADtB,CAAxB;AAEA,UAAM,YAAY,GAAG,OAAO,CAAC,MAAR,CAAkB,eAAlB,CAArB;AAEA,aAAO,YAAY,CAAC,QAApB;AACD;AACH;AAEC;AACE;AACE;AACE;AACE;AACE;AACE;AAEJ;;;;yCACH,sB,EACA,e,EACA,U,EACA,M,EAAuB;AAAI;AAEwC;AAErE,UAAM,SAAS,GAAG,IAAI,KAAK,qBAAT,CAA+B,UAA/B,EAA2C,eAA3C,EAA4D,MAAM,CAAC,EAAnE,CAAlB;;AAEA,UAAI,sBAAsB,YAAY,WAAtC,EAAmD;AACjD,QAAA,eAAe,CAAC,oBAAhB,CACE,IAAI,cAAJ,CAAsB,sBAAtB,EAA8C,IAA9C,EACO;AAAC,UAAA,SAAS,EAAE,MAAM,CAAC,IAAnB;AAAyB,UAAA,SAAS,EAAT;AAAzB,SADP,CADF;AAGD,OAJD,MAIO;AACL,YAAM,QAAQ,GAAG,KAAK,eAAL,CAAwB,MAAxB,EAAgC,SAAhC,EAA2C,eAA3C,CAAjB;;AACA,YAAM,UAAU,GAAG,eAAe,CAAC,qBAAhB,CACf,IAAI,eAAJ,CAAoB,sBAApB,EAA4C,MAAM,CAAC,gBAAnD,EAAqE,QAArE,CADe,CAAnB;AAEA,QAAA,SAAS,CAAC,iBAAV,GAA8B,UAAU,CAAC,QAAzC;AACD;;AAED,MAAA,SAAS,CACN,UADH,CACc,MAAM,CAAC,KADrB,EAC4B,MAAM,CAAC,MADnC,EAEG,cAFH,CAEkB,MAAM,CAAC,QAFzB;AAIA,aAAO,SAAP;AACD;AACH;AAEC;AACE;AACE;AACE;AACE;AACE;AAEJ;;;;oCACD,M,EACA,S,EACA,e,EAAkB;AAEpB,UAAM,YAAY,GAAG,MAAM,IAAI,MAAM,CAAC,gBAAjB,IAAqC,MAAM,CAAC,gBAAP,CAAwB,QAAlF,CAFoB,CAGxB;AAEG;AACI;AACI;;AACP,UAAM,SAAS,GAAqB,CAClC;AAAC,QAAA,OAAO,EAAE,KAAK,oBAAf;AAAqC,QAAA,QAAQ,EAAE;AAA/C,OADkC,EAElC;AAAC,QAAA,OAAO,EAAE,KAAK,gBAAf;AAAiC,QAAA,QAAQ,EAAE,MAAM,CAAC;AAAlD,OAFkC,EAGlC;AAAC,QAAA,OAAO,EAAE,KAAK,qBAAf;AAAsC,QAAA,QAAQ,EAAE;AAAhD,OAHkC,CAApC;;AAMA,UAAI,MAAM,CAAC,SAAP,KACC,CAAC,YAAD,IAAiB,CAAC,YAAY,CAAC,GAAb,CAAwC,cAAxC,EAAwD,IAAxD,CADnB,CAAJ,EACuF;AACrF,QAAA,SAAS,CAAC,IAAV,CAAe;AACb,UAAA,OAAO,EAAE,cADI;AAEb,UAAA,QAAQ,EAAE;AAAC,YAAA,KAAK,EAAE,MAAM,CAAC,SAAf;AAA0B,YAAA,MAAM,EAAEA,EAAY;AAA9C;AAFG,SAAf;AAID;;AAED,aAAO,QAAQ,CAAC,MAAT,CAAgB;AAAC,QAAA,MAAM,EAAE,YAAY,IAAI,KAAK,SAA9B;AAAyC,QAAA,SAAS,EAAT;AAAzC,OAAhB,CAAP;AACD;AACH;AAEC;AACE;AACE;;;;sCACuB,S,EAA4B;AACpD,UAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,OAAjB,CAAyB,SAAzB,CAAd;;AAEA,UAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAxB,EAA+B,CAA/B,EADc,CAEpB;AAEK;;AACC,YAAI,CAAC,KAAK,WAAL,CAAiB,MAAtB,EAA8B;AAC5B,eAAK,mBAAL,CAAyB,OAAzB,CAAiC,UAAC,aAAD,EAAgB,OAAhB,EAAuB;AACtD,gBAAI,aAAJ,EAAmB;AACjB,cAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,EAAoC,aAApC;AACD,aAFD,MAEO;AACL,cAAA,OAAO,CAAC,eAAR,CAAwB,aAAxB;AACD;AACF,WAND;;AAQA,eAAK,mBAAL,CAAyB,KAAzB;;AACA,eAAK,kBAAL,GAA0B,IAA1B;AACD;AACF;AACF;AACH;AAEC;AACE;;;;mEACmD;AAClD,UAAM,gBAAgB,GAAG,KAAK,iBAAL,CAAuB,mBAAvB,EAAzB,CADkD,CAEtD;;;AAEI,UAAI,gBAAgB,CAAC,aAArB,EAAoC;AAClC,YAAM,QAAQ,GAAG,gBAAgB,CAAC,aAAjB,CAA+B,QAAhD;;AAEA,aAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAT,GAAkB,CAA/B,EAAkC,CAAC,GAAG,CAAC,CAAvC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C,cAAI,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAtB;;AAEA,cAAI,OAAO,KAAK,gBAAZ,IACF,OAAO,CAAC,QAAR,KAAqB,QADnB,IAEF,OAAO,CAAC,QAAR,KAAqB,OAFnB,IAGF,CAAC,OAAO,CAAC,YAAR,CAAqB,WAArB,CAHH,EAGsC;AAEpC,iBAAK,mBAAL,CAAyB,GAAzB,CAA6B,OAA7B,EAAsC,OAAO,CAAC,YAAR,CAAqB,aAArB,CAAtC;;AACA,YAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,EAAoC,MAApC;AACD;AACF;AACF;AACF;AACH;;;;kCAEwB,O,EAA4B;AAChD,UAAI,CAAC,GAAG,OAAO,CAAC,MAAhB;;AAEA,aAAO,CAAC,EAAR,EAAY;AAChB;AACM;AACM;AACM;AACZ,QAAA,OAAO,CAAC,CAAD,CAAP,CAAW,KAAX;AACD;AACF;;;wBA/Sc;AACb,aAAO,KAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,WAAxC,GAAsD,KAAK,uBAAlE;AACD;AACH;;;;wBAEiB;AACb,aAAO,KAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,WAAxC,GAAsD,KAAK,uBAAlE;AACD;;;;;;+BAhBF,sB,CAAS,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,cAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,OAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,cAAA,CAAA,CAAA;AAAA,C;;;QACR;;;AAAC,cAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAwC;AAAA,IAAA,IAAA,EA9DzC;AA8DyC,GAAxC,EA7DD;AAAA,IAAA,IAAA,EAYA;AAZA,GA6DC,EAhDD;AAAA,IAAA,IAAA,EAAA;AAAA,GAgDC,EA9CD;AAAA,IAAA,IAAA,EAAA;AAAA,GA8CC,EA7CY;AAAA,IAAA,IAAA,EAfb;AAea,GA6CZ,EA3DD;AAAA,IAAA,IAAA,EAAA;AAAA,GA2DC,EA1DU;AAAA,IAAA,IAAA,EAeX;AAfW,GA0DV,EA1CD;AAAA,IAAA,IAAA,EADA;AACA,GA0CC,EA1CD;AAAA,IAAA,IAAA,EARA;AAQA,GA0CC,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA,C;AAAC;AAAI;AAIC;;;IA4WI,S;;;;;AACX,qBACI,OADJ,EAEI,QAFJ;AAGD;AAAQ;AAC8C;AAC3B;AAEV,EAAA,QAPhB,EAQoD,cARpD,EASwC,cATxC,EAU4B,YAV5B,EAWI,gBAXJ,EAWsC;AAAA;;AAAA,8BAC9B,OAD8B,EACrB,QADqB,EACX,cADW,EACK,YADL,EACmB,gBADnB,EACqC,cADrC,EAEhC,YAFgC,EAElB,kBAFkB,EAEE,eAFF;AAGrC;;;EAf4B,c;;0BAD9B,iB,CAAA,C,EAAU;AAAA,SAAA,KAAA,CAAA,IAAA,SAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,0BAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,0BAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,EAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,CAAA;AAAA,C;;;;qBACT;;;AAAC,SAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAmC;AAAA,IAAA,IAAA,EA7XpC;AA6XoC,GAAnC,EA5XD;AAAA,IAAA,IAAA,EAYA;AAZA,GA4XC,EA/WD;AAAA,IAAA,IAAA,EAPM,QAON;AAPc,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EA8XT;AA9XS,KAAA;AAOd,GA+WC,EAQmB;AAAA,IAAA,IAAA,EA9Wd,eA8Wc;AA9WC,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EA+WhB;AA/WgB,KAAA,EA+WR;AAAA,MAAA,IAAA,EAAI,MAAJ;AAAU,MAAA,IAAA,EAAA,CAAC,0BAAD;AAAV,KA/WQ;AA8WD,GARnB,EAS0D;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EACtD,MADsD;AAChD,MAAA,IAAA,EAAA,CAAC,0BAAD;AADgD,KAAA;AAAA,GAT1D,EAU8C;AAAA,IAAA,IAAA,EACL,SADK;AACI,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAA9C;AAA8C,KAAA,EAAtC;AAAA,MAAA,IAAA,EAAI;AAAJ,KAAsC;AADJ,GAV9C,EAW+B;AAAA,IAAA,IAAA,EAtYhC;AAsYgC,GAX/B,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1XA,C;AAAC;AAAI;AAEiB;AACS;AACjC;AACA;;;AA6YD,SAAS,oBAAT,CACI,MADJ,EAC8B,cAD9B,EAC8D;AAC5D,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAW,cAAX,CAAA,EAA8B,MAA9B,CAAA;AACD;AClaD;AACA;AACA;AACA;AACA;AACA;AACA;;AAcA;;;AACA,IAAI,gBAAgB,GAAG,CAAvB;AACA;AACG;AAC0C;;IAWhC,c;AAYX,2BACF;AACA;AACuB,EAAA,SAHrB,EAIU,WAJV,EAKU,OALV,EAK4B;AAAA;;AAFP,SAAA,SAAA,GAAA,SAAA;AACX,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,OAAA,GAAA,OAAA;AAAmB;;AAZpB,SAAA,IAAA,GAAsC,QAAtC;AAYuB;;;;+BAExB;AACN,UAAI,CAAC,KAAK,SAAV,EAAqB;AACzB;AACM;AACM;AACM;AACM;AAClB,aAAK,SAAL,GAAiB,gBAAgB,CAAC,KAAK,WAAN,EAAmB,KAAK,OAAL,CAAa,WAAhC,CAAjC;AACD;AACF;;;gCAEW,O,EAAsB;AAChC,UAAM,aAAa,GAAG,OAAO,CAAC,iBAAD,CAAP,IAA8B,OAAO,CAAC,uBAAD,CAA3D;;AAEA,UAAI,aAAJ,EAAmB;AACjB,aAAK,YAAL,GAAoB,aAAa,CAAC,YAAlC;AACD;AACF;;;mCAEc,K,EAAiB;AAClC;AACI;AACI;AACI;AACR,MAAA,eAAe,CAAC,KAAK,SAAN,EACX,KAAK,CAAC,OAAN,KAAkB,CAAlB,IAAuB,KAAK,CAAC,OAAN,KAAkB,CAAzC,GAA6C,UAA7C,GAA0D,OAD/C,EACwD,KAAK,YAD7D,CAAf;AAED;;;;;;+BAtDF,sB,CAAS,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,cAAA,EACC,MAAA,CAAA,iBAAA,CAAA,YAAA,EAAsC,CAAtC,CADD,EACuC,MAAA,CAAA,iBAAA,CACtC,MAAA,CAAA,UADsC,CADvC,EAEiB,MAAA,CAAA,iBAAA,CACpB,SADoB,CAFjB,CAAD;AAIN,C;;AAAS,cAAE,CAAA,IAAF,GAAE,MAAA,CAAA,iBAAA,CAAwB;AAAA,EAAA,IACnC,EAAA,cADmC;AAChB,EAAA,SAAE,EAAA,CAAA,CAAA,EAAA,EAAA,kBAAA,EAAmB,EAAnB,CAAA,EAAmB,CACxC,EADwC,EACxC,gBADwC,EACnB,EADmB,CAAnB,CADc;AAEd,EAAA,QAAA,EAAA,CAFc;AAGpC,EAAA,YAAA,EACF,SAAA,2BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;GAJsC;;;;;;GAAA;8BAAA;oBAKlC,oB;AALkC,CAAxB,CAAF;;AAKP,cAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAwC;AAAA,IAAA,IAAA,EAjBrB,YAiBqB;AAjBT,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAgChC;AAhCgC,KAAA;AAiBS,GAAxC,EAec;AAAA,IAAA,IAAA,EAnClB;AAmCkB,GAfd,EAnBJ;AAAA,IAAA,IAAA,EACM;AADN,GAmBI,CAAA;AAAA,CAAA;;AAlBiB,cAAA,CAAA,cAAA,GAAA;AACF,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAmBlB,KAnBkB;AAmBb,IAAA,IAAA,EAAA,CAAC,YAAD;AAnBa,GAAA,CADE;AAoBK,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGzB;AAHyB,GAAA,CApBL;AAuBV,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAGV,KAHU;AAGL,IAAA,IAAA,EAAA,CAAC,kBAAD;AAHK,GAAA,CAvBU;AA0BW,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAE/B,KAF+B;AAE1B,IAAA,IAAA,EAAA,CAAC,gBAAD;AAF0B,GAAA;AA1BX,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BU,C;AAAC;AAAI;AAGkB;;;IA8C3C,c;AAGX,2BACF;AAAuF;AAE7D,EAAA,UAHxB,EAIY,WAJZ,EAKY,OALZ,EAK8B;AAAA;;AAFN,SAAA,UAAA,GAAA,UAAA;AACZ,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,OAAA,GAAA,OAAA;AAPH,SAAA,EAAA,8BAAiC,gBAAgB,EAAjD;AAOyB;;;;+BAE1B;AAAA;;AACN,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,aAAK,UAAL,GAAkB,gBAAgB,CAAC,KAAK,WAAN,EAAmB,KAAK,OAAL,CAAa,WAAhC,CAAlC;AACD;;AAED,UAAI,KAAK,UAAT,EAAqB;AACnB,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAA;AACrB,cAAM,SAAS,GAAG,MAAI,CAAC,UAAL,CAAgB,kBAAlC;;AAEA,cAAI,SAAS,IAAI,CAAC,SAAS,CAAC,eAA5B,EAA6C;AAC3C,YAAA,SAAS,CAAC,eAAV,GAA4B,MAAI,CAAC,EAAjC;AACD;AACF,SAND;AAOD;AACF;;;;;;+BAhCF,sB,CAAS,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,cAAA,EACC,MAAA,CAAA,iBAAA,CAAA,YAAA,EAAsC,CAAtC,CADD,EACuC,MAAA,CAAA,iBAAA,CACtC,MAAA,CAAA,UADsC,CADvC,EAEiB,MAAA,CAAA,iBAAA,CACpB,SADoB,CAFjB,CAAD;AAIN,C;;AAAO,cAAE,CAAA,IAAF,GAAoB,MAAA,CAAA,iBAAA,CAC3B;AAAA,EAAA,IAAQ,EAAA,cAAR;AAAY,EAAA,SACb,EAAA,CAAA,CAAA,EAAA,EAAA,kBAAA,EACF,EADE,CAAA,EACF,CAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,CADE,CADC;AAEH,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,kBAAA,CAFG;AAEH,EAAA,QAAA,EAAA,CAFG;AAEH,EAAA,YAAA,EAAA,SAAA,2BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;GAFG;;;GAAA;aAGC,gB;AAHD,CAD2B,CAApB;;AAIL,cAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAwC;AAAA,IAAA,IAAA,EA5ErB,YA4EqB;AA5ET,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAkF9B;AAlF8B,KAAA;AA4ES,GAAxC,EAMgB;AAAA,IAAA,IAAA,EArFpB;AAqFoB,GANhB,EA9EJ;AAAA,IAAA,IAAA,EACM;AADN,GA8EI,CAAA;AAAA,CAAA;;AA7EiB,cAAA,CAAA,cAAA,GAAA;AACF,EAAA,EAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EA6ElB;AA7EkB,GAAA;AADE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8ET,C;AAAC;AAAI;AAA6C;;;IAkCnD,gB;;;;iCAJZ,wB,CAAS,C,EAAA;AAAC,SAAA,KAAA,CAAA,IACT,gBADS,GAAA;AACC,C;;+BAA8D,iB,CAAA;AAAA,EAAA,IAAA,EAAA,gBAAA;AACjE,EAAA,SAAS,EAAA,CAAA,CAAA,EAAA,EAAA,oBAAA,EAAqB,EAArB,CAAA,EACjB,CAAA,oBAAA,CADiB,EACjB,CAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,CADiB,CADwD;AAEzE,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,oBAAA;AAFyE,C;;;;;;;;;;;;;AAGrE,C;AAAC;AAAI;AAIiB;AACX;;;IAMH,gB;;;;iCAJZ,wB,CAAS,C,EAAA;AAAC,SAAA,KAAA,CAAA,IACT,gBADS,GAAA;AACC,C;;+BAA8D,iB,CAAA;AAAA,EAAA,IAAA,EAAA,gBAAA;AACjE,EAAA,SAAS,EAAA,CAAA,CAAA,EAAA,EAAA,oBAAA,EAAqB,EAArB,CAAA,EACjB,CAAA,oBAAA,CADiB,EACjB,CAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,CADiB,CADwD;AAEzE,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,oBAAA;AAFyE,C;;;;;;;;;;;;;AAGrE,C;AAAC;AAAI;AAIgC;AACL;AACF;;;AAEnC,SAAS,gBAAT,CAA0B,OAA1B,EAA4D,WAA5D,EAA4F;AAC1F,MAAI,MAAM,GAAuB,OAAO,CAAC,aAAR,CAAsB,aAAvD;;AAEA,SAAO,MAAM,IAAI,CAAC,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,sBAA1B,CAAlB,EAAqE;AACnE,IAAA,MAAM,GAAG,MAAM,CAAC,aAAhB;AACD;;AAED,SAAO,MAAM,GAAG,WAAW,CAAC,IAAZ,CAAiB,UAAA,MAAM;AAAA,WAAI,MAAM,CAAC,EAAP,KAAc,MAAO,CAAC,EAA1B;AAAA,GAAvB,CAAH,GAA0D,IAAvE;AACD;AC5JD;AACA;AACA;AACA;AACA;AACA;AACA;;;IA2Ca,e;;;;8BA3BZ,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,eAAS,CAAA,IAAT,GAAS,MAAA,CAAA,gBAAA,CACM;AAAA,EAAA,OAAA,EAAA,SAAA,uBAAA,CACD,CADC,EACD;AAAA,WACZ,KAAA,CAAA,IAAA,eAAA,GADY;AACG,GAFF;AAEE,EAAA,SAChB,EAAA,CACD,SADC,EAEC,mCAFD,CAHc;AAMb,EAAA,OAAA,EAAA,CAAA,CAAc,aAAd,EACA,YADA,EAEA,eAFA,CAAA,EAEgB,eAFhB;AANa,CADN,CAAT;;CAUkB,YAAA;AAAA,GAAA,OAAA,SAAA,KAChB,WADgB,IACD,SADC,KAEjB,MAAA,CAAA,kBAAA,CACW,eADX,EACa;AAAA,IAAA,YACZ,EAAA,wBAAkB;AAAA,aAAA,CAAA,kBAAA,EAClB,cADkB,EACJ,cADI,EAElB,gBAFkB,EAEJ,gBAFI,CAAA;AAGlB,KAJY;AAIZ,IAAA,OAAgB,EAAA,mBAAA;AAAA,aAChB,CAAA,aAAA,EACD,YADC,EAEF,eAFE,CADgB;AAGP,KAPG;AAOH,IAAA,OAAA,EAAA,mBACT;AAAA,aAAS,CAAA,kBAAA,EACT,cADS,EACT,cADS,EAC0B,gBAD1B,EAEV,gBAFU,EAGX,eAHW,CAAT;AAGgB;AAXJ,GADb,CAFiB;AAcA,C;AAAkB;;;AAAC,CAAA,YACtC;AAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,eAAA,EAAA,CAAA;kBAAA;;;;;;;;AAAA,GAAA,CAAA,E,IAAA,E,IAAA;AACI,CAFkC;AC/CvC;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;;;AAEA,SAAA,eAAA,EAAA,0BAAA,EAAA,0BAAA,EAAA,kCAAA,EAAA,mCAAA,EAAA,2CAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,uBAAA,EAAA,eAAA,EAAA,mBAAA,EAAA,yCAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string | string[] = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n    state('enter', style({transform: 'none'})),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))),\n    transition('* => void, * => exit',\n        animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  DomPortal,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {matDialogAnimations} from './dialog-animations';\nimport {MatDialogConfig} from './dialog-config';\n\n/** Event that captures the state of dialog container animations. */\ninterface DialogAnimationEvent {\n  state: 'opened' | 'opening' | 'closing' | 'closed';\n  totalTime: number;\n}\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n@Directive()\nexport abstract class _MatDialogContainerBase extends BasePortalOutlet {\n  protected _document: Document;\n\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<DialogAnimationEvent>();\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /**\n   * Type of interaction that led to the dialog being closed. This is used to determine\n   * whether the focus style will be applied when returning focus to its original location\n   * after the dialog is closed.\n   */\n  _closeInteractionType: FocusOrigin|null = null;\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    protected _focusTrapFactory: FocusTrapFactory,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig,\n    private _focusMonitor?: FocusMonitor) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n\n  /** Starts the dialog exit animation. */\n  abstract _startExitAnimation(): void;\n\n  /** Initializes the dialog container with the attached content. */\n  _initializeWithAttachedContent() {\n    this._setupFocusTrap();\n    // Save the previously focused element. This element will be re-focused\n    // when the dialog closes.\n    this._capturePreviouslyFocusedElement();\n    // Move focus onto the dialog immediately in order to prevent the user\n    // from accidentally opening multiple dialogs at the same time.\n    this._focusDialogContainer();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Moves focus back into the dialog if it was moved out. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n      if (focusContainer) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  protected _trapFocus() {\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else if (!this._containsFocus()) {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  protected _restoreFocus() {\n    const previousElement = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && previousElement &&\n        typeof previousElement.focus === 'function') {\n      const activeElement = this._document.activeElement;\n      const element = this._elementRef.nativeElement;\n\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (!activeElement || activeElement === this._document.body || activeElement === element ||\n          element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n          this._closeInteractionType = null;\n        } else {\n          previousElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Sets up the focus trap. */\n  private _setupFocusTrap() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n  }\n\n  /** Captures the element that was focused before the dialog was opened. */\n  private _capturePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n    }\n  }\n\n  /** Focuses the dialog container. */\n  private _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Returns whether focus is inside the dialog. */\n  private _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = this._document.activeElement;\n    return element === activeElement || element.contains(activeElement);\n  }\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends _MatDialogContainerBase {\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone({toState, totalTime}: AnimationEvent) {\n    if (toState === 'enter') {\n      this._trapFocus();\n      this._animationStateChanged.next({state: 'opened', totalTime});\n    } else if (toState === 'exit') {\n      this._restoreFocus();\n      this._animationStateChanged.next({state: 'closed', totalTime});\n    }\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart({toState, totalTime}: AnimationEvent) {\n    if (toState === 'enter') {\n      this._animationStateChanged.next({state: 'opening', totalTime});\n    } else if (toState === 'exit' || toState === 'void') {\n      this._animationStateChanged.next({state: 'closing', totalTime});\n    }\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {_MatDialogContainerBase} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: _MatDialogContainerBase,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.state === 'opened'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.state === 'closed'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        _closeDialogVia(this, 'keyboard');\n      });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(this, 'mouse');\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.state === 'closing'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(),\n          event.totalTime + 100);\n    });\n\n    this._state = MatDialogState.CLOSING;\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed;\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n  private _finishDialogClose() {\n    this._state = MatDialogState.CLOSED;\n    this._overlayRef.dispose();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nexport function _closeDialogVia<R>(ref: MatDialogRef<R>, interactionType: FocusOrigin, result?: R) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n  return ref.close(result);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Directive,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  StaticProvider,\n  TemplateRef,\n  Type,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer, _MatDialogContainerBase} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n@Directive()\nexport abstract class _MatDialogBase<C extends _MatDialogContainerBase> implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  _getAfterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._getAfterAllClosed() :\n      this._getAfterAllClosed().pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      private _defaultOptions: MatDialogConfig|undefined,\n      private _parentDialog: _MatDialogBase<C>|undefined,\n      private _overlayContainer: OverlayContainer,\n      scrollStrategy: any,\n      private _dialogRefConstructor: Type<MatDialogRef<any>>,\n      private _dialogContainerType: Type<C>,\n      private _dialogDataToken: InjectionToken<any>) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the dialog.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                            config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n\n  /**\n   * Opens a modal dialog containing the given template.\n   * @param template TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                            config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n\n  open<T, D = any, R = any>(template: ComponentType<T> | TemplateRef<T>,\n                            config?: MatDialogConfig<D>): MatDialogRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                            config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    // Notify the dialog container that the content has been attached.\n    dialogContainer._initializeWithAttachedContent();\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): C {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatDialogConfig, useValue: config}]\n    });\n\n    const containerPortal = new ComponentPortal(this._dialogContainerType,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<C>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping dialog container.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: C,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{$implicit: config.data, dialogRef}));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param dialogContainer Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: C): Injector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The dialog container should be provided as the dialog container and the dialog's\n    // content are created out of the same `ViewContainerRef` and as such, are siblings\n    // for injector purposes. To allow the hierarchy that is expected, the dialog\n    // container is explicitly provided in the injector.\n    const providers: StaticProvider[] = [\n      {provide: this._dialogContainerType, useValue: dialogContainer},\n      {provide: this._dialogDataToken, useValue: config.data},\n      {provide: this._dialogRefConstructor, useValue: dialogRef}\n    ];\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {value: config.direction, change: observableOf()}\n      });\n    }\n\n    return Injector.create({parent: userInjector || this._injector, providers});\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._getAfterAllClosed().next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog extends _MatDialogBase<MatDialogContainer> {\n  constructor(\n      overlay: Overlay,\n      injector: Injector,\n      /**\n       * @deprecated `_location` parameter to be removed.\n       * @breaking-change 10.0.0\n       */\n      @Optional() location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() parentDialog: MatDialog,\n      overlayContainer: OverlayContainer) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy,\n        MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n  }\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {_closeDialogVia, MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef,\n        event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n      // The dialog title directive is always used in combination with a `MatDialogRef`.\n      // tslint:disable-next-line: lightweight-tokens\n      @Optional() private _dialogRef: MatDialogRef<any>,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './dialog-module';\nexport * from './dialog';\nexport * from './dialog-container';\nexport * from './dialog-content-directives';\nexport * from './dialog-config';\nexport * from './dialog-ref';\nexport * from './dialog-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}