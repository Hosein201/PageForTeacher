{"ast":null,"code":"import _toConsumableArray from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _get from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createForOfIteratorHelper from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/githup/Teachers/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /** Whether sticky positioning should be applied. */\n\n\n    _createClass(_class, [{\n      key: \"hasStickyChanged\",\n\n      /** Whether the sticky value has changed since this was last called. */\n      value: function hasStickyChanged() {\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /** Resets the dirty check for cases where the sticky state has been used without checking. */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }, {\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      },\n      set: function set(v) {\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\n\n\nvar CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\n\nvar TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nvar CdkCellDef = function CdkCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkCellDef);\n\n  this.template = template;\n};\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n\nCdkCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar CdkHeaderCellDef = function CdkHeaderCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkHeaderCellDef);\n\n  this.template = template;\n};\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n\nCdkHeaderCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar CdkFooterCellDef = function CdkFooterCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkFooterCellDef);\n\n  this.template = template;\n};\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n\nCdkFooterCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkColumnDef.\n\n/** @docs-private */\n\n\nvar CdkColumnDefBase = function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n};\n\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n  _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n  var _super2 = _createSuper(CdkColumnDef);\n\n  function CdkColumnDef(_table) {\n    var _this2;\n\n    _classCallCheck(this, CdkColumnDef);\n\n    _this2 = _super2.call(this);\n    _this2._table = _table;\n    _this2._stickyEnd = false;\n    return _this2;\n  }\n  /** Unique name for this column. */\n\n\n  _createClass(CdkColumnDef, [{\n    key: \"_updateColumnCssClassName\",\n\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    value: function _updateColumnCssClassName() {\n      this._columnCssClassName = [\"cdk-column-\".concat(this.cssClassFriendlyName)];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_setNameInput\",\n    value: function _setNameInput(value) {\n      // If the directive is set without a name (updated programatically), then this setter will\n      // trigger with an empty string and should not overwrite the programatically set value.\n      if (value) {\n        this._name = value;\n        this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n\n        this._updateColumnCssClassName();\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n\n  }, {\n    key: \"stickyEnd\",\n    get: function get() {\n      return this._stickyEnd;\n    },\n    set: function set(v) {\n      var prevValue = this._stickyEnd;\n      this._stickyEnd = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n  }]);\n\n  return CdkColumnDef;\n}(_CdkColumnDefBase);\n\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n  return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkColumnDef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n\n\nvar BaseCdkCell = function BaseCdkCell(columnDef, elementRef) {\n  _classCallCheck(this, BaseCdkCell);\n\n  // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n  // with destructuring.\n  var classList = elementRef.nativeElement.classList;\n\n  var _iterator = _createForOfIteratorHelper(columnDef._columnCssClassName),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var className = _step.value;\n      classList.add(className);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/** Header cell template container that adds the right classes and role. */\n\n\nvar CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n  _inherits(CdkHeaderCell, _BaseCdkCell);\n\n  var _super3 = _createSuper(CdkHeaderCell);\n\n  function CdkHeaderCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkHeaderCell);\n\n    return _super3.call(this, columnDef, elementRef);\n  }\n\n  return CdkHeaderCell;\n}(BaseCdkCell);\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkHeaderCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n  _inherits(CdkFooterCell, _BaseCdkCell2);\n\n  var _super4 = _createSuper(CdkFooterCell);\n\n  function CdkFooterCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkFooterCell);\n\n    return _super4.call(this, columnDef, elementRef);\n  }\n\n  return CdkFooterCell;\n}(BaseCdkCell);\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkFooterCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n  _inherits(CdkCell, _BaseCdkCell3);\n\n  var _super5 = _createSuper(CdkCell);\n\n  function CdkCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkCell);\n\n    return _super5.call(this, columnDef, elementRef);\n  }\n\n  return CdkCell;\n}(BaseCdkCell);\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @docs-private\n */\n\n\nvar _Schedule = function _Schedule() {\n  _classCallCheck(this, _Schedule);\n\n  this.tasks = [];\n  this.endTasks = [];\n};\n/** Injection token used to provide a coalesced style scheduler. */\n\n\nvar _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n\n\nvar _CoalescedStyleScheduler = /*#__PURE__*/function () {\n  function _CoalescedStyleScheduler(_ngZone) {\n    _classCallCheck(this, _CoalescedStyleScheduler);\n\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n\n\n  _createClass(_CoalescedStyleScheduler, [{\n    key: \"schedule\",\n    value: function schedule(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n\n  }, {\n    key: \"scheduleEnd\",\n    value: function scheduleEnd(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n  }, {\n    key: \"_createScheduleIfNeeded\",\n    value: function _createScheduleIfNeeded() {\n      var _this3 = this;\n\n      if (this._currentSchedule) {\n        return;\n      }\n\n      this._currentSchedule = new _Schedule();\n\n      this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        while (_this3._currentSchedule.tasks.length || _this3._currentSchedule.endTasks.length) {\n          var schedule = _this3._currentSchedule; // Capture new tasks scheduled by the current set of tasks.\n\n          _this3._currentSchedule = new _Schedule();\n\n          var _iterator2 = _createForOfIteratorHelper(schedule.tasks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var task = _step2.value;\n              task();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(schedule.endTasks),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _task = _step3.value;\n\n              _task();\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n\n        _this3._currentSchedule = null;\n      });\n    }\n  }, {\n    key: \"_getScheduleObservable\",\n    value: function _getScheduleObservable() {\n      // Use onStable when in the context of an ongoing change detection cycle so that we\n      // do not accidentally trigger additional cycles.\n      return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n    }\n  }]);\n\n  return _CoalescedStyleScheduler;\n}();\n\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n  return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\n_CoalescedStyleScheduler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: _CoalescedStyleScheduler,\n  factory: _CoalescedStyleScheduler.ɵfac\n});\n\n_CoalescedStyleScheduler.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n\nvar BaseRowDef = /*#__PURE__*/function () {\n  function BaseRowDef(\n  /** @docs-private */\n  template, _differs) {\n    _classCallCheck(this, BaseRowDef);\n\n    this.template = template;\n    this._differs = _differs;\n  }\n\n  _createClass(BaseRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        var columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n\n  }, {\n    key: \"getColumnsDiff\",\n    value: function getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n\n  }, {\n    key: \"extractCellTemplate\",\n    value: function extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n  }]);\n\n  return BaseRowDef;\n}();\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nBaseRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkHeaderRowDef.\n\n/** @docs-private */\n\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return CdkHeaderRowDefBase;\n}(BaseRowDef);\n\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n  _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n  var _super7 = _createSuper(CdkHeaderRowDef);\n\n  function CdkHeaderRowDef(template, _differs, _table) {\n    var _this4;\n\n    _classCallCheck(this, CdkHeaderRowDef);\n\n    _this4 = _super7.call(this, template, _differs);\n    _this4._table = _table;\n    return _this4;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkHeaderRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase);\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkHeaderRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkFooterRowDef.\n\n/** @docs-private */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return CdkFooterRowDefBase;\n}(BaseRowDef);\n\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n  _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n  var _super9 = _createSuper(CdkFooterRowDef);\n\n  function CdkFooterRowDef(template, _differs, _table) {\n    var _this5;\n\n    _classCallCheck(this, CdkFooterRowDef);\n\n    _this5 = _super9.call(this, template, _differs);\n    _this5._table = _table;\n    return _this5;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkFooterRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkFooterRowDef;\n}(_CdkFooterRowDefBase);\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkFooterRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n  _inherits(CdkRowDef, _BaseRowDef3);\n\n  var _super10 = _createSuper(CdkRowDef);\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  function CdkRowDef(template, _differs, _table) {\n    var _this6;\n\n    _classCallCheck(this, CdkRowDef);\n\n    _this6 = _super10.call(this, template, _differs);\n    _this6._table = _table;\n    return _this6;\n  }\n\n  return CdkRowDef;\n}(BaseRowDef);\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n\n\nvar CdkCellOutlet = /*#__PURE__*/function () {\n  function CdkCellOutlet(_viewContainer) {\n    _classCallCheck(this, CdkCellOutlet);\n\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  _createClass(CdkCellOutlet, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n  }]);\n\n  return CdkCellOutlet;\n}();\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n\nCdkCellOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkHeaderRow = function CdkHeaderRow() {\n  _classCallCheck(this, CdkHeaderRow);\n};\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkFooterRow = function CdkFooterRow() {\n  _classCallCheck(this, CdkFooterRow);\n};\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkRow = function CdkRow() {\n  _classCallCheck(this, CdkRow);\n};\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar CdkNoDataRow = function CdkNoDataRow(templateRef) {\n  _classCallCheck(this, CdkNoDataRow);\n\n  this.templateRef = templateRef;\n};\n\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n  return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkNoDataRow,\n  selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n});\n\nCdkNoDataRow.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   */\n  function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction,\n  /**\n   * @deprecated `_coalescedStyleScheduler` parameter to become required.\n   * @breaking-change 11.0.0\n   */\n  _coalescedStyleScheduler) {\n    var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    _classCallCheck(this, StickyStyler);\n\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._cachedCellWidths = [];\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _this7 = this;\n\n      var elementsToClear = [];\n\n      var _iterator4 = _createForOfIteratorHelper(rows),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var row = _step4.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          elementsToClear.push(row);\n\n          for (var i = 0; i < row.children.length; i++) {\n            elementsToClear.push(row.children[i]);\n          }\n        } // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this._scheduleStyleChanges(function () {\n        var _iterator5 = _createForOfIteratorHelper(elementsToClear),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var element = _step5.value;\n\n            _this7._removeStickyStyle(element, stickyDirections);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      var _this8 = this;\n\n      var recalculateCellWidths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      }))) {\n        return;\n      }\n\n      var firstRow = rows[0];\n      var numCells = firstRow.children.length;\n\n      var cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates); // Coalesce with sticky row updates (and potentially other changes like column resize).\n\n\n      this._scheduleStyleChanges(function () {\n        var isRtl = _this8.direction === 'rtl';\n        var start = isRtl ? 'right' : 'left';\n        var end = isRtl ? 'left' : 'right';\n\n        var _iterator6 = _createForOfIteratorHelper(rows),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var row = _step6.value;\n\n            for (var i = 0; i < numCells; i++) {\n              var cell = row.children[i];\n\n              if (stickyStartStates[i]) {\n                _this8._addStickyStyle(cell, start, startPositions[i]);\n              }\n\n              if (stickyEndStates[i]) {\n                _this8._addStickyStyle(cell, end, endPositions[i]);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      var _this9 = this;\n\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      } // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n\n\n      var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n\n      var stickyHeights = [];\n      var elementsToStick = [];\n\n      for (var rowIndex = 0, stickyHeight = 0; rowIndex < rows.length; rowIndex++) {\n        stickyHeights[rowIndex] = stickyHeight;\n\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        var row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n\n        if (rowIndex !== rows.length - 1) {\n          stickyHeight += row.getBoundingClientRect().height;\n        }\n      } // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n      // (and potentially other changes like column resize).\n\n\n      this._scheduleStyleChanges(function () {\n        for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {\n          if (!states[_rowIndex]) {\n            continue;\n          }\n\n          var height = stickyHeights[_rowIndex];\n\n          var _iterator7 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var element = _step7.value;\n\n              _this9._addStickyStyle(element, position, height);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      var _this10 = this;\n\n      if (!this._isNativeHtmlTable) {\n        return;\n      }\n\n      var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).\n\n      this._scheduleStyleChanges(function () {\n        if (stickyStates.some(function (state) {\n          return !state;\n        })) {\n          _this10._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          _this10._addStickyStyle(tfoot, 'bottom', 0);\n        }\n      });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator8 = _createForOfIteratorHelper(stickyDirections),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var dir = _step8.value;\n          element.style[dir] = '';\n        } // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return stickyDirections.indexOf(dir) === -1 && element.style[dir];\n      });\n\n      if (hasDirection) {\n        element.style.zIndex = this._getCalculatedZIndex(element);\n      } else {\n        // When not hasDirection, _getCalculatedZIndex will always return ''.\n        element.style.zIndex = '';\n\n        if (this._needsPositionStickyOnElement) {\n          element.style.position = '';\n        }\n\n        element.classList.remove(this._stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue) {\n      element.classList.add(this._stickCellCss);\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.zIndex = this._getCalculatedZIndex(element);\n\n      if (this._needsPositionStickyOnElement) {\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n\n      var _iterator9 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var dir = _step9.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      var recalculateCellWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!recalculateCellWidths && this._cachedCellWidths.length) {\n        return this._cachedCellWidths;\n      }\n\n      var cellWidths = [];\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        var cell = firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      this._cachedCellWidths = cellWidths;\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Schedules styles to be applied when the style scheduler deems appropriate.\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\n     */\n\n  }, {\n    key: \"_scheduleStyleChanges\",\n    value: function _scheduleStyleChanges(changes) {\n      if (this._coalescedStyleScheduler) {\n        this._coalescedStyleScheduler.schedule(changes);\n      } else {\n        changes();\n      }\n    }\n  }]);\n\n  return StickyStyler;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(\"Text column could not find a parent table for registration.\");\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingNameError() {\n  return Error(\"Table text column must have a name.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n\n\nvar DataRowOutlet = function DataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, DataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n\nDataRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n\n\nvar HeaderRowOutlet = function HeaderRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, HeaderRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n\nHeaderRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n\n\nvar FooterRowOutlet = function FooterRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, FooterRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n\nFooterRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n\n\nvar NoDataRowOutlet = function NoDataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, NoDataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n  return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nNoDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NoDataRowOutlet,\n  selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n});\n\nNoDataRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\n\n\nvar CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\n\nvar RowViewRef = /*#__PURE__*/function (_EmbeddedViewRef) {\n  _inherits(RowViewRef, _EmbeddedViewRef);\n\n  var _super11 = _createSuper(RowViewRef);\n\n  function RowViewRef() {\n    _classCallCheck(this, RowViewRef);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return RowViewRef;\n}(EmbeddedViewRef);\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n\n\nvar CdkTable = /*#__PURE__*/function () {\n  function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform,\n  /**\n   * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\n   *    parameters to become required.\n   * @breaking-change 11.0.0\n   */\n  _viewRepeater, _coalescedStyleScheduler, // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\n  // this property will never be null.\n  // tslint:disable-next-line: lightweight-tokens\n  _viewportRuler) {\n    _classCallCheck(this, CdkTable);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._viewportRuler = _viewportRuler;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false; // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n\n\n  _createClass(CdkTable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this11 = this;\n\n      this._setupStickyStyler();\n\n      if (this._isNativeHtmlTable) {\n        this._applyNativeTableSections();\n      } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n\n\n      this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n        return _this11.trackBy ? _this11.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      }); // Table cell dimensions may change after resizing the window. Signal the sticky styler to\n      // refresh its cache of cell widths the next time sticky styles are updated.\n      // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\n\n      if (this._viewportRuler) {\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          _this11._forceRecalculateCellWidths = true;\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n\n      this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingRowDefsError();\n      } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n      var columnsChanged = this._renderUpdatedColumns();\n\n      var rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.\n\n      this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n      this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.\n\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n\n        this._headerRowDefChanged = false;\n      } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n\n        this._footerRowDefChanged = false;\n      } // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n\n\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      } else if (this._stickyColumnStylesNeedReset) {\n        // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n        // called when it row data arrives. Otherwise, we need to call it proactively.\n        this.updateStickyColumnStyles();\n      }\n\n      this._checkStickyStates();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rowOutlet.viewContainer.clear();\n\n      this._noDataRowOutlet.viewContainer.clear();\n\n      this._headerRowOutlet.viewContainer.clear();\n\n      this._footerRowOutlet.viewContainer.clear();\n\n      this._cachedRenderRowsMap.clear();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n\n  }, {\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this12 = this;\n\n      this._renderRows = this._getAllRenderRows();\n\n      var changes = this._dataDiffer.diff(this._renderRows);\n\n      if (!changes) {\n        this._updateNoDataRow();\n\n        return;\n      }\n\n      var viewContainer = this._rowOutlet.viewContainer; // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\n      // `else` clause once `_viewRepeater` is turned into a required parameter.\n\n      if (this._viewRepeater) {\n        this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {\n          return _this12._getEmbeddedViewArgs(record.item, currentIndex);\n        }, function (record) {\n          return record.item.data;\n        }, function (change) {\n          if (change.operation === 1\n          /* INSERTED */\n          && change.context) {\n            _this12._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n          }\n        });\n      } else {\n        changes.forEachOperation(function (record, prevIndex, currentIndex) {\n          if (record.previousIndex == null) {\n            var renderRow = record.item;\n            var rowDef = renderRow.rowDef;\n            var context = {\n              $implicit: renderRow.data\n            };\n\n            _this12._renderRow(_this12._rowOutlet, rowDef, currentIndex, context);\n          } else if (currentIndex == null) {\n            viewContainer.remove(prevIndex);\n          } else {\n            var view = viewContainer.get(prevIndex);\n            viewContainer.move(view, currentIndex);\n          }\n        });\n      } // Update the meta context of a row's context data (index, count, first, last, ...)\n\n\n      this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var rowView = viewContainer.get(record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n\n      this._updateNoDataRow();\n\n      this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addColumnDef\",\n    value: function addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeColumnDef\",\n    value: function removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addRowDef\",\n    value: function addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeRowDef\",\n    value: function removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addHeaderRowDef\",\n    value: function addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeHeaderRowDef\",\n    value: function removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addFooterRowDef\",\n    value: function addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeFooterRowDef\",\n    value: function removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n\n  }, {\n    key: \"setNoDataRow\",\n    value: function setNoDataRow(noDataRow) {\n      this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyHeaderRowStyles\",\n    value: function updateStickyHeaderRowStyles() {\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var thead = tableElement.querySelector('thead');\n\n      if (thead) {\n        thead.style.display = headerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._headerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._headerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyFooterRowStyles\",\n    value: function updateStickyFooterRowStyles() {\n      var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var tfoot = tableElement.querySelector('tfoot');\n\n      if (tfoot) {\n        tfoot.style.display = footerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._footerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._footerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n\n  }, {\n    key: \"updateStickyColumnStyles\",\n    value: function updateStickyColumnStyles() {\n      var _this13 = this;\n\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var dataRows = this._getRenderedRows(this._rowOutlet);\n\n      var footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n      // In a table using a fixed layout, row content won't affect column width, so sticky styles\n      // don't need to be cleared unless either the sticky column config changes or one of the row\n      // defs change.\n\n\n      if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']);\n\n        this._stickyColumnStylesNeedReset = false;\n      } // Update the sticky styles for each header row depending on the def's sticky state\n\n\n      headerRows.forEach(function (headerRow, i) {\n        _this13._addStickyColumnStyles([headerRow], _this13._headerRowDefs[i]);\n      }); // Update the sticky styles for each data row depending on its def's sticky state\n\n      this._rowDefs.forEach(function (rowDef) {\n        // Collect all the rows rendered with this row definition.\n        var rows = [];\n\n        for (var i = 0; i < dataRows.length; i++) {\n          if (_this13._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n\n        _this13._addStickyColumnStyles(rows, rowDef);\n      }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n      footerRows.forEach(function (footerRow, i) {\n        _this13._addStickyColumnStyles([footerRow], _this13._footerRowDefs[i]);\n      }); // Reset the dirty state of the sticky input change since it has been used.\n\n      Array.from(this._columnDefsByName.values()).forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n\n  }, {\n    key: \"_getAllRenderRows\",\n    value: function _getAllRenderRows() {\n      var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n      // new cache while unused ones can be picked up by garbage collection.\n\n      var prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n      for (var i = 0; i < this._data.length; i++) {\n        var data = this._data[i];\n\n        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n\n        for (var j = 0; j < renderRowsForData.length; j++) {\n          var renderRow = renderRowsForData[j];\n\n          var cache = this._cachedRenderRowsMap.get(renderRow.data);\n\n          if (cache.has(renderRow.rowDef)) {\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n\n          renderRows.push(renderRow);\n        }\n      }\n\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n\n  }, {\n    key: \"_getRenderRowsForData\",\n    value: function _getRenderRowsForData(data, dataIndex, cache) {\n      var rowDefs = this._getRowDefs(data, dataIndex);\n\n      return rowDefs.map(function (rowDef) {\n        var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n\n        if (cachedRenderRows.length) {\n          var dataRow = cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data: data,\n            rowDef: rowDef,\n            dataIndex: dataIndex\n          };\n        }\n      });\n    }\n    /** Update the map containing the content's column definitions. */\n\n  }, {\n    key: \"_cacheColumnDefs\",\n    value: function _cacheColumnDefs() {\n      var _this14 = this;\n\n      this._columnDefsByName.clear();\n\n      var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n      columnDefs.forEach(function (columnDef) {\n        if (_this14._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n\n        _this14._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /** Update the list of all available row definitions that can be used. */\n\n  }, {\n    key: \"_cacheRowDefs\",\n    value: function _cacheRowDefs() {\n      this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n      this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n      this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.\n\n      var defaultRowDefs = this._rowDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n\n  }, {\n    key: \"_renderUpdatedColumns\",\n    value: function _renderUpdatedColumns() {\n      var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n        return acc || !!def.getColumnsDiff();\n      }; // Force re-render data rows if the list of column definitions have changed.\n\n\n      var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n\n      if (dataColumnsChanged) {\n        this._forceRenderDataRows();\n      } // Force re-render header/footer rows if the list of column definitions have changed.\n\n\n      var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (headerColumnsChanged) {\n        this._forceRenderHeaderRows();\n      }\n\n      var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (footerColumnsChanged) {\n        this._forceRenderFooterRows();\n      }\n\n      return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      this._data = [];\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      } // Stop listening for data from the previous data source.\n\n\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n\n        this._renderChangeSubscription = null;\n      }\n\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n\n        this._rowOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this15 = this;\n\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n\n      var dataStream;\n\n      if (isDataSource(this.dataSource)) {\n        dataStream = this.dataSource.connect(this);\n      } else if (isObservable(this.dataSource)) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n\n      if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownDataSourceError();\n      }\n\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n        _this15._data = data || [];\n\n        _this15.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n\n  }, {\n    key: \"_forceRenderHeaderRows\",\n    value: function _forceRenderHeaderRows() {\n      var _this16 = this;\n\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n\n      this._headerRowDefs.forEach(function (def, i) {\n        return _this16._renderRow(_this16._headerRowOutlet, def, i);\n      });\n\n      this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n\n  }, {\n    key: \"_forceRenderFooterRows\",\n    value: function _forceRenderFooterRows() {\n      var _this17 = this;\n\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n\n      this._footerRowDefs.forEach(function (def, i) {\n        return _this17._renderRow(_this17._footerRowOutlet, def, i);\n      });\n\n      this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n\n  }, {\n    key: \"_addStickyColumnStyles\",\n    value: function _addStickyColumnStyles(rows, rowDef) {\n      var _this18 = this;\n\n      var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n        var columnDef = _this18._columnDefsByName.get(columnName);\n\n        if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnName);\n        }\n\n        return columnDef;\n      });\n      var stickyStartStates = columnDefs.map(function (columnDef) {\n        return columnDef.sticky;\n      });\n      var stickyEndStates = columnDefs.map(function (columnDef) {\n        return columnDef.stickyEnd;\n      });\n\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n\n  }, {\n    key: \"_getRenderedRows\",\n    value: function _getRenderedRows(rowOutlet) {\n      var renderedRows = [];\n\n      for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n        var viewRef = rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n\n  }, {\n    key: \"_getRowDefs\",\n    value: function _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n\n      var rowDefs = [];\n\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(function (def) {\n          return !def.when || def.when(dataIndex, data);\n        });\n      } else {\n        var rowDef = this._rowDefs.find(function (def) {\n          return def.when && def.when(dataIndex, data);\n        }) || this._defaultRowDef;\n\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n\n      if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n\n      return rowDefs;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(renderRow, index) {\n      var rowDef = renderRow.rowDef;\n      var context = {\n        $implicit: renderRow.data\n      };\n      return {\n        templateRef: rowDef.template,\n        context: context,\n        index: index\n      };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n\n  }, {\n    key: \"_renderRow\",\n    value: function _renderRow(outlet, rowDef, index) {\n      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n      this._renderCellTemplateForItem(rowDef, context);\n\n      return view;\n    }\n  }, {\n    key: \"_renderCellTemplateForItem\",\n    value: function _renderCellTemplateForItem(rowDef, context) {\n      var _iterator10 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var cellTemplate = _step10.value;\n\n          if (CdkCellOutlet.mostRecentCellOutlet) {\n            CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n\n  }, {\n    key: \"_updateRowIndexContext\",\n    value: function _updateRowIndexContext() {\n      var viewContainer = this._rowOutlet.viewContainer;\n\n      for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        var viewRef = viewContainer.get(renderIndex);\n        var context = viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /** Gets the column definitions for the provided row def. */\n\n  }, {\n    key: \"_getCellTemplates\",\n    value: function _getCellTemplates(rowDef) {\n      var _this19 = this;\n\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n\n      return Array.from(rowDef.columns, function (columnId) {\n        var column = _this19._columnDefsByName.get(columnId);\n\n        if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnId);\n        }\n\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n\n  }, {\n    key: \"_applyNativeTableSections\",\n    value: function _applyNativeTableSections() {\n      var documentFragment = this._document.createDocumentFragment();\n\n      var sections = [{\n        tag: 'thead',\n        outlets: [this._headerRowOutlet]\n      }, {\n        tag: 'tbody',\n        outlets: [this._rowOutlet, this._noDataRowOutlet]\n      }, {\n        tag: 'tfoot',\n        outlets: [this._footerRowOutlet]\n      }];\n\n      for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n        var section = _sections[_i2];\n\n        var element = this._document.createElement(section.tag);\n\n        element.setAttribute('role', 'rowgroup');\n\n        var _iterator11 = _createForOfIteratorHelper(section.outlets),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var outlet = _step11.value;\n            element.appendChild(outlet.elementRef.nativeElement);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        documentFragment.appendChild(element);\n      } // Use a DocumentFragment so we don't hit the DOM on each iteration.\n\n\n      this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n\n  }, {\n    key: \"_forceRenderDataRows\",\n    value: function _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n\n      this._rowOutlet.viewContainer.clear();\n\n      this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n\n  }, {\n    key: \"_checkStickyStates\",\n    value: function _checkStickyStates() {\n      var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n        return acc || d.hasStickyChanged();\n      }; // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n\n\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this._stickyColumnStylesNeedReset = true;\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n\n  }, {\n    key: \"_setupStickyStyler\",\n    value: function _setupStickyStyler() {\n      var _this20 = this;\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n        _this20._stickyStyler.direction = value;\n\n        _this20.updateStickyColumnStyles();\n      });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n\n  }, {\n    key: \"_getOwnDefs\",\n    value: function _getOwnDefs(items) {\n      var _this21 = this;\n\n      return items.filter(function (item) {\n        return !item._table || item._table === _this21;\n      });\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n\n  }, {\n    key: \"_updateNoDataRow\",\n    value: function _updateNoDataRow() {\n      var noDataRow = this._customNoDataRow || this._noDataRow;\n\n      if (noDataRow) {\n        var shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n        if (shouldShow !== this._isShowingNoDataRow) {\n          var container = this._noDataRowOutlet.viewContainer;\n          shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n          this._isShowingNoDataRow = shouldShow;\n        }\n      }\n    }\n  }, {\n    key: \"trackBy\",\n    get: function get() {\n      return this._trackByFn;\n    },\n    set: function set(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n      }\n\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    },\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n\n  }, {\n    key: \"multiTemplateDataRows\",\n    get: function get() {\n      return this._multiTemplateDataRows;\n    },\n    set: function set(v) {\n      this._multiTemplateDataRows = coerceBooleanProperty(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n      // this setter will be invoked before the row outlet has been defined hence the null check.\n\n      if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n\n  }, {\n    key: \"fixedLayout\",\n    get: function get() {\n      return this._fixedLayout;\n    },\n    set: function set(v) {\n      this._fixedLayout = coerceBooleanProperty(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n\n      this._forceRecalculateCellWidths = true;\n      this._stickyColumnStylesNeedReset = true;\n    }\n  }]);\n\n  return CdkTable;\n}();\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8));\n};\n\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(DataRowOutlet, true);\n      ɵngcc0.ɵɵstaticViewQuery(HeaderRowOutlet, true);\n      ɵngcc0.ɵɵstaticViewQuery(FooterRowOutlet, true);\n      ɵngcc0.ɵɵstaticViewQuery(NoDataRowOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  hostVars: 2,\n  hostBindings: function CdkTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\",\n    fixedLayout: \"fixedLayout\"\n  },\n  exportAs: [\"cdkTable\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_TABLE,\n    useExisting: CdkTable\n  }, {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }])],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵprojection(1, 1);\n      ɵngcc0.ɵɵelementContainer(2, 0);\n      ɵngcc0.ɵɵelementContainer(3, 1);\n      ɵngcc0.ɵɵelementContainer(4, 2);\n      ɵngcc0.ɵɵelementContainer(5, 3);\n    }\n  },\n  directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n  styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n  encapsulation: 2\n});\n\nCdkTable.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['role']\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [_VIEW_REPEATER_STRATEGY]\n    }]\n  }, {\n    type: _CoalescedStyleScheduler,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [_COALESCED_STYLE_SCHEDULER]\n    }]\n  }, {\n    type: ViewportRuler,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  fixedLayout: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet, {\n      static: true\n    }]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet, {\n      static: true\n    }]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet, {\n      static: true\n    }]\n  }],\n  _noDataRowOutlet: [{\n    type: ViewChild,\n    args: [NoDataRowOutlet, {\n      static: true\n    }]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef, {\n      descendants: true\n    }]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef, {\n      descendants: true\n    }]\n  }],\n  _noDataRow: [{\n    type: ContentChild,\n    args: [CdkNoDataRow]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n      // The view for `MatTable` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: _CoalescedStyleScheduler,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_COALESCED_STYLE_SCHEDULER]\n      }]\n    }, {\n      type: ɵngcc3.ViewportRuler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    fixedLayout: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _noDataRowOutlet: [{\n      type: ViewChild,\n      args: [NoDataRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\n\n\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar CdkTextColumn = /*#__PURE__*/function () {\n  function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    _classCallCheck(this, CdkTextColumn);\n\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n\n\n  _createClass(CdkTextColumn, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._syncColumnDefName();\n\n      if (this.headerText === undefined) {\n        this.headerText = this._createDefaultHeaderText();\n      }\n\n      if (!this.dataAccessor) {\n        this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {\n          return data[name];\n        };\n      }\n\n      if (this._table) {\n        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n        // since the columnDef will not pick up its content by the time the table finishes checking\n        // its content and initializing the rows.\n        this.columnDef.cell = this.cell;\n        this.columnDef.headerCell = this.headerCell;\n\n        this._table.addColumnDef(this.columnDef);\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTableTextColumnMissingParentTableError();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._table) {\n        this._table.removeColumnDef(this.columnDef);\n      }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n\n  }, {\n    key: \"_createDefaultHeaderText\",\n    value: function _createDefaultHeaderText() {\n      var name = this.name;\n\n      if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableTextColumnMissingNameError();\n      }\n\n      if (this._options && this._options.defaultHeaderTextTransform) {\n        return this._options.defaultHeaderTextTransform(name);\n      }\n\n      return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n\n  }, {\n    key: \"_syncColumnDefName\",\n    value: function _syncColumnDefName() {\n      if (this.columnDef) {\n        this.columnDef.name = this.name;\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._name = name; // With Ivy, inputs can be initialized before static query results are\n      // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n\n      this._syncColumnDefName();\n    }\n  }]);\n\n  return CdkTextColumn;\n}();\n\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\n\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(CdkColumnDef, true);\n      ɵngcc0.ɵɵstaticViewQuery(CdkCellDef, true);\n      ɵngcc0.ɵɵstaticViewQuery(CdkHeaderCellDef, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    justify: \"justify\",\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n  },\n  directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell],\n  encapsulation: 2\n});\n\nCdkTextColumn.ctorParameters = function () {\n  return [{\n    type: CdkTable,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TEXT_COLUMN_OPTIONS]\n    }]\n  }];\n};\n\nCdkTextColumn.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  headerText: [{\n    type: Input\n  }],\n  dataAccessor: [{\n    type: Input\n  }],\n  justify: [{\n    type: Input\n  }],\n  columnDef: [{\n    type: ViewChild,\n    args: [CdkColumnDef, {\n      static: true\n    }]\n  }],\n  cell: [{\n    type: ViewChild,\n    args: [CdkCellDef, {\n      static: true\n    }]\n  }],\n  headerCell: [{\n    type: ViewChild,\n    args: [CdkHeaderCellDef, {\n      static: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    justify: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n\nvar CdkTableModule = function CdkTableModule() {\n  _classCallCheck(this, CdkTableModule);\n};\n\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkTableModule_Factory(t) {\n    return new (t || CdkTableModule)();\n  },\n  imports: [[ScrollingModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function declarations() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n    },\n    imports: function imports() {\n      return [ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"sources":["../../../../../../src/cdk/table/can-stick.ts","../../../../../../src/cdk/table/tokens.ts","../../../../../../src/cdk/table/cell.ts","../../../../../../src/cdk/table/coalesced-style-scheduler.ts","../../../../../../src/cdk/table/row.ts","../../../../../../src/cdk/table/sticky-styler.ts","../../../../../../src/cdk/table/table-errors.ts","../../../../../../src/cdk/table/table.ts","../../../../../../src/cdk/table/text-column.ts","../../../../../../src/cdk/table/table-module.ts","../../../../../../src/cdk/table/public-api.ts","../../../../../../src/cdk/table/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport interface CanStick {\n  /** Whether sticky positioning should be applied. */\n  sticky: boolean;\n\n  /** Whether the sticky input has changed since it was last checked. */\n  _hasStickyChanged: boolean;\n\n  /** Whether the sticky value has changed since this was last called. */\n  hasStickyChanged(): boolean;\n\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\n  resetStickyChanged(): void;\n}\n\n/** @docs-private */\nexport type CanStickCtor = Constructor<CanStick>;\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky(): boolean { return this._sticky; }\n    set sticky(v: boolean) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    _sticky: boolean = false;\n\n    /** Whether the sticky input has changed since it was last checked. */\n    _hasStickyChanged: boolean = false;\n\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged(): boolean {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nexport const CDK_TABLE = new InjectionToken<any>('CDK_TABLE');\n\n/** Configurable options for `CdkTextColumn`. */\nexport interface TextColumnOptions<T> {\n  /**\n   * Default function that provides the header text based on the column name if a header\n   * text is not provided.\n   */\n  defaultHeaderTextTransform?: (name: string) => string;\n\n  /** Default data accessor to use if one is not provided. */\n  defaultDataAccessor?: (data: T, name: string) => string;\n}\n\n/** Injection token that can be used to specify the text column options. */\nexport const TEXT_COLUMN_OPTIONS =\n    new InjectionToken<TextColumnOptions<any>>('text-column-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  Input,\n  TemplateRef,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CDK_TABLE} from './tokens';\n\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({selector: '[cdkCellDef]'})\nexport class CdkCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkHeaderCellDef]'})\nexport class CdkHeaderCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkFooterCellDef]'})\nexport class CdkFooterCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\n}\n\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase: CanStickCtor&typeof CdkColumnDefBase =\n    mixinHasStickyInput(CdkColumnDefBase);\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[cdkColumnDef]',\n  inputs: ['sticky'],\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\n})\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string { return this._name; }\n  set name(name: string) { this._setNameInput(name); }\n  protected _name: string;\n\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  @Input('stickyEnd')\n  get stickyEnd(): boolean {\n    return this._stickyEnd;\n  }\n  set stickyEnd(v: boolean) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  _stickyEnd: boolean = false;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n\n  /**\n   * Class name for cells in this column.\n   * @docs-private\n   */\n  _columnCssClassName: string[];\n\n  constructor(@Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super();\n  }\n\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  protected _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setNameInput(value: string) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n  static ngAcceptInputType_stickyEnd: BooleanInput;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n    // with destructuring.\n    const classList = elementRef.nativeElement.classList;\n    for (const className of columnDef._columnCssClassName) {\n      classList.add(className);\n    }\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, InjectionToken} from '@angular/core';\nimport {from, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\n/**\n * @docs-private\n */\nexport class _Schedule {\n  tasks: (() => unknown)[] = [];\n  endTasks: (() => unknown)[] = [];\n}\n\n/** Injection token used to provide a coalesced style scheduler. */\nexport const _COALESCED_STYLE_SCHEDULER =\n    new InjectionToken<_CoalescedStyleScheduler>('_COALESCED_STYLE_SCHEDULER');\n\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n@Injectable()\nexport class _CoalescedStyleScheduler implements OnDestroy {\n  private _currentSchedule: _Schedule|null = null;\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(private readonly _ngZone: NgZone) {}\n\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.tasks.push(task);\n  }\n\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.endTasks.push(task);\n  }\n\n  /** Prevent any further tasks from running. */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  private _createScheduleIfNeeded() {\n    if (this._currentSchedule) { return; }\n\n    this._currentSchedule = new _Schedule();\n\n    this._getScheduleObservable().pipe(\n        takeUntil(this._destroyed),\n    ).subscribe(() => {\n      while (this._currentSchedule!.tasks.length || this._currentSchedule!.endTasks.length) {\n        const schedule = this._currentSchedule!;\n\n        // Capture new tasks scheduled by the current set of tasks.\n        this._currentSchedule = new _Schedule();\n\n        for (const task of schedule.tasks) {\n          task();\n        }\n\n        for (const task of schedule.endTasks) {\n          task();\n        }\n      }\n\n      this._currentSchedule = null;\n    });\n  }\n\n  private _getScheduleObservable() {\n    // Use onStable when in the context of an ongoing change detection cycle so that we\n    // do not accidentally trigger additional cycles.\n    return this._ngZone.isStable ?\n        from(Promise.resolve(undefined)) :\n        this._ngZone.onStable.pipe(take(1));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Inject,\n  Optional\n} from '@angular/core';\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\nimport {CdkCellDef, CdkColumnDef} from './cell';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n@Directive()\nexport abstract class BaseRowDef implements OnChanges {\n  /** The columns to be displayed on this row. */\n  columns: Iterable<string>;\n\n  /** Differ used to check if any changes were made to the columns. */\n  protected _columnsDiffer: IterableDiffer<any>;\n\n  constructor(\n      /** @docs-private */ public template: TemplateRef<any>, protected _differs: IterableDiffers) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff(): IterableChanges<any>|null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\n\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\nconst _CdkHeaderRowDefBase: CanStickCtor&typeof CdkHeaderRowDefBase =\n    mixinHasStickyInput(CdkHeaderRowDefBase);\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n})\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {}\nconst _CdkFooterRowDefBase: CanStickCtor&typeof CdkFooterRowDefBase =\n    mixinHasStickyInput(CdkFooterRowDefBase);\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkFooterRowDef]',\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n})\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  static ngAcceptInputType_sticky: BooleanInput;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n})\nexport class CdkRowDef<T> extends BaseRowDef {\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when: (index: number, rowData: T) => boolean;\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(\n    template: TemplateRef<any>,\n    _differs: IterableDiffers,\n    @Inject(CDK_TABLE) @Optional() public _table?: any) {\n    super(template, _differs);\n  }\n}\n\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  dataIndex?: number;\n\n  /** Index location of the rendered row that this cell is located within. */\n  renderIndex?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n@Directive({selector: '[cdkCellOutlet]'})\nexport class CdkCellOutlet implements OnDestroy {\n  /** The ordered list of cells to render within this outlet's view container */\n  cells: CdkCellDef[];\n\n  /** The data context to be provided to each cell */\n  context: any;\n\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet: CdkCellOutlet|null = null;\n\n  constructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-header-row, tr[cdk-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkHeaderRow {\n}\n\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-row, tr[cdk-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkRow {\n}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[cdkNoDataRow]'\n})\nexport class CdkNoDataRow {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\nimport {Direction} from '@angular/cdk/bidi';\nimport {_CoalescedStyleScheduler} from './coalesced-style-scheduler';\n\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\n\n\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nexport class StickyStyler {\n  private _cachedCellWidths: number[] = [];\n\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   */\n  constructor(private _isNativeHtmlTable: boolean,\n              private _stickCellCss: string,\n              public direction: Direction,\n              /**\n               * @deprecated `_coalescedStyleScheduler` parameter to become required.\n               * @breaking-change 11.0.0\n               */\n              private _coalescedStyleScheduler?: _CoalescedStyleScheduler,\n              private _isBrowser = true,\n              private readonly _needsPositionStickyOnElement = true) { }\n\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\n    const elementsToClear: HTMLElement[] = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i] as HTMLElement);\n      }\n    }\n\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._scheduleStyleChanges(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[],\n      recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n        stickyEndStates.some(state => state))) {\n      return;\n    }\n\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const cellWidths: number[] = this._getCellWidths(firstRow, recalculateCellWidths);\n\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._scheduleStyleChanges(() => {\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i] as HTMLElement;\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i]);\n          }\n\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i]);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyHeights: number[] = [];\n    const elementsToStick: HTMLElement[][] = [];\n    for (let rowIndex = 0, stickyHeight = 0; rowIndex < rows.length; rowIndex++) {\n      stickyHeights[rowIndex] = stickyHeight;\n\n      if (!states[rowIndex]) {\n        continue;\n      }\n\n      const row = rows[rowIndex];\n      elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n          Array.from(row.children) as HTMLElement[] : [row];\n\n      if (rowIndex !== rows.length - 1) {\n        stickyHeight += row.getBoundingClientRect().height;\n      }\n    }\n\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._scheduleStyleChanges(() => {\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        const height = stickyHeights[rowIndex];\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, height);\n        }\n      }\n    });\n  }\n\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n\n    const tfoot = tableElement.querySelector('tfoot')!;\n\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._scheduleStyleChanges(() => {\n      if (stickyStates.some(state => !state)) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0);\n      }\n    });\n  }\n\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n    }\n\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir =>\n        stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number) {\n    element.classList.add(this._stickCellCss);\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element: HTMLElement): string {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1,\n    };\n\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS as Iterable<StickyDirection> & StickyDirection[]) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row: HTMLElement, recalculateCellWidths = true): number[] {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n\n    const cellWidths: number[] = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Schedules styles to be applied when the style scheduler deems appropriate.\n   * @breaking-change 11.0.0 This method can be removed in favor of calling\n   * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\n   */\n  private _scheduleStyleChanges(changes: () => void) {\n    if (this._coalescedStyleScheduler) {\n      this._coalescedStyleScheduler.schedule(changes);\n    } else {\n      changes();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nexport function getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nexport function getTableMissingMatchingRowDefError(data: any) {\n  return Error(`Could not find a matching row definition for the` +\n      `provided row data: ${JSON.stringify(data)}`);\n}\n\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nexport function getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' +\n      'cannot determine which columns should be rendered.');\n}\n\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nexport function getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nexport function getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nexport function getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  CollectionViewer,\n  DataSource,\n  _DisposeViewRepeaterStrategy,\n  isDataSource,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeater,\n  _ViewRepeaterItemChange,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterOperation,\n} from '@angular/cdk/collections';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Optional,\n  QueryList,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  isObservable,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {CdkColumnDef} from './cell';\nimport {_CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER} from './coalesced-style-scheduler';\nimport {\n  BaseRowDef,\n  CdkCellOutlet,\n  CdkCellOutletMultiRowContext,\n  CdkCellOutletRowContext,\n  CdkFooterRowDef,\n  CdkHeaderRowDef,\n  CdkNoDataRow,\n  CdkRowDef\n} from './row';\nimport {StickyStyler} from './sticky-styler';\nimport {\n  getTableDuplicateColumnNameError,\n  getTableMissingMatchingRowDefError,\n  getTableMissingRowDefsError,\n  getTableMultipleDefaultRowDefsError,\n  getTableUnknownColumnError,\n  getTableUnknownDataSourceError\n} from './table-errors';\nimport {CDK_TABLE} from './tokens';\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n  viewContainer: ViewContainerRef;\n}\n\n/**\n * Union of the types that can be set as the data source for a `CdkTable`.\n * @docs-private\n */\ntype CdkTableDataSourceInput<T> =\n    DataSource<T>|Observable<ReadonlyArray<T>|T[]>|ReadonlyArray<T>|T[];\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n@Directive({selector: '[rowOutlet]'})\nexport class DataRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n@Directive({selector: '[headerRowOutlet]'})\nexport class HeaderRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n@Directive({selector: '[footerRowOutlet]'})\nexport class FooterRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n@Directive({selector: '[noDataRowOutlet]'})\nexport class NoDataRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\n}\n\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nexport const CDK_TABLE_TEMPLATE =\n    // Note that according to MDN, the `caption` element has to be projected as the **first**\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n    `\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * @docs-private\n */\nexport interface RowContext<T> extends CdkCellOutletMultiRowContext<T>,\n                                       CdkCellOutletRowContext<T> {}\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * @docs-private\n */\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n@Component({\n  selector: 'cdk-table, table[cdk-table]',\n  exportAs: 'cdkTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'cdk-table',\n    '[class.cdk-table-fixed-layout]': 'fixedLayout',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [\n    {provide: CDK_TABLE, useExisting: CdkTable},\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n  ]\n})\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  private _document: Document;\n\n  /** Latest data provided by the data source. */\n  protected _data: T[]|ReadonlyArray<T>;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  private _renderRows: RenderRow<T>[];\n\n  /** Subscription that listens for the data provided by the data source. */\n  private _renderChangeSubscription: Subscription|null;\n\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  private _rowDefs: CdkRowDef<T>[];\n\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  private _headerRowDefs: CdkHeaderRowDef[];\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  private _footerRowDefs: CdkFooterRowDef[];\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n  /** Stores the row definition that does not have a when predicate. */\n  private _defaultRowDef: CdkRowDef<T>|null;\n\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *its* content child.\n   */\n  private _customColumnDefs = new Set<CdkColumnDef>();\n\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *its* content child.\n   */\n  private _customRowDefs = new Set<CdkRowDef<T>>();\n\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *its* content child.\n   */\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\n\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *its* content child.\n   */\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\n\n  /** No data row that was defined outside of the direct content children of the table. */\n  private _customNoDataRow: CdkNoDataRow | null;\n\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _headerRowDefChanged = true;\n\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _footerRowDefChanged = true;\n\n  /**\n   * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n   * change.\n   */\n  private _stickyColumnStylesNeedReset = true;\n\n  /**\n   * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n   * `false`, cached values will be used instead. This is only applicable to tables with\n   * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n   */\n  private _forceRecalculateCellWidths = true;\n\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\n\n  /** Whether the table is applied to a native `<table>`. */\n  private _isNativeHtmlTable: boolean;\n\n  /**\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\n   * the table's rows and cells.\n   */\n  private _stickyStyler: StickyStyler;\n\n  /**\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n   * table subclasses.\n   */\n  protected stickyCssClass: string = 'cdk-table-sticky';\n\n  /**\n   * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n   * the position is set in a selector associated with the value of stickyCssClass. May be\n   * overridden by table subclasses\n   */\n  protected needsPositionStickyOnElement = true;\n\n  /** Whether the no data row is currently showing anything. */\n  private _isShowingNoDataRow = false;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n  set trackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  @Input()\n  get dataSource(): CdkTableDataSourceInput<T> {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: CdkTableDataSourceInput<T>;\n\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  @Input()\n  get multiTemplateDataRows(): boolean {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(v: boolean) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  _multiTemplateDataRows: boolean = false;\n\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  @Input()\n  get fixedLayout(): boolean {\n    return this._fixedLayout;\n  }\n  set fixedLayout(v: boolean) {\n    this._fixedLayout = coerceBooleanProperty(v);\n\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  private _fixedLayout: boolean = false;\n\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   *\n   * @docs-private\n   */\n  viewChange: BehaviorSubject<{start: number, end: number}> =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  @ViewChild(DataRowOutlet, {static: true}) _rowOutlet: DataRowOutlet;\n  @ViewChild(HeaderRowOutlet, {static: true}) _headerRowOutlet: HeaderRowOutlet;\n  @ViewChild(FooterRowOutlet, {static: true}) _footerRowOutlet: FooterRowOutlet;\n  @ViewChild(NoDataRowOutlet, {static: true}) _noDataRowOutlet: NoDataRowOutlet;\n\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  @ContentChildren(CdkColumnDef, {descendants: true}) _contentColumnDefs: QueryList<CdkColumnDef>;\n\n  /** Set of data row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkRowDef, {descendants: true}) _contentRowDefs: QueryList<CdkRowDef<T>>;\n\n  /** Set of header row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkHeaderRowDef, {\n    descendants: true\n  }) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n\n  /** Set of footer row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkFooterRowDef, {\n    descendants: true\n  }) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n\n  /** Row definition that will only be rendered if there's no data in the table. */\n  @ContentChild(CdkNoDataRow) _noDataRow: CdkNoDataRow;\n\n  constructor(\n      protected readonly _differs: IterableDiffers,\n      protected readonly _changeDetectorRef: ChangeDetectorRef,\n      protected readonly _elementRef: ElementRef, @Attribute('role') role: string,\n      @Optional() protected readonly _dir: Directionality, @Inject(DOCUMENT) _document: any,\n      private _platform: Platform,\n\n      /**\n       * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\n       *    parameters to become required.\n       * @breaking-change 11.0.0\n       */\n      @Optional() @Inject(_VIEW_REPEATER_STRATEGY)\n        protected readonly _viewRepeater?: _ViewRepeater<T, RenderRow<T>, RowContext<T>>,\n      @Optional() @Inject(_COALESCED_STYLE_SCHEDULER)\n        protected readonly _coalescedStyleScheduler?: _CoalescedStyleScheduler,\n      // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\n      // this property will never be null.\n      // tslint:disable-next-line: lightweight-tokens\n      @Optional() private readonly _viewportRuler?: ViewportRuler) {\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n\n    // Table cell dimensions may change after resizing the window. Signal the sticky styler to\n    // refresh its cache of cell widths the next time sticky styles are updated.\n    // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\n    if (this._viewportRuler) {\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        this._forceRecalculateCellWidths = true;\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingRowDefsError();\n    }\n\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n\n    this._checkStickyStates();\n  }\n\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._noDataRowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n\n    this._cachedRenderRowsMap.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\n    // `else` clause once `_viewRepeater` is turned into a required parameter.\n    if (this._viewRepeater) {\n      this._viewRepeater.applyChanges(\n          changes,\n          viewContainer,\n          (record: IterableChangeRecord<RenderRow<T>>,\n           _adjustedPreviousIndex: number|null,\n           currentIndex: number|null) => this._getEmbeddedViewArgs(record.item, currentIndex!),\n          (record) => record.item.data,\n          (change: _ViewRepeaterItemChange<RenderRow<T>, RowContext<T>>) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n              this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n          });\n    } else {\n      changes.forEachOperation(\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number|null,\n         currentIndex: number|null) => {\n          if (record.previousIndex == null) {\n            const renderRow = record.item;\n            const rowDef = renderRow.rowDef;\n            const context: RowContext<T> = {$implicit: renderRow.data};\n            this._renderRow(this._rowOutlet, rowDef, currentIndex!, context);\n          } else if (currentIndex == null) {\n            viewContainer.remove(prevIndex!);\n          } else {\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex!);\n            viewContainer.move(view!, currentIndex);\n          }\n        });\n    }\n\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\n      rowView.context.$implicit = record.item.data;\n    });\n\n    this._updateNoDataRow();\n    this.updateStickyColumnStyles();\n  }\n\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.add(rowDef);\n  }\n\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.delete(rowDef);\n  }\n\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow: CdkNoDataRow | null) {\n    this._customNoDataRow = noDataRow;\n  }\n\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles(): void {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles(): void {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\n\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if ((this._isNativeHtmlTable && !this._fixedLayout)\n        || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning(\n          [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n      this._stickyColumnStylesNeedReset = false;\n    }\n\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows: HTMLElement[] = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  private _getAllRenderRows(): RenderRow<T>[] {\n    const renderRows: RenderRow<T>[] = [];\n\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef)!.push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  private _getRenderRowsForData(\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift()!;\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {data, rowDef, dataIndex};\n      }\n    });\n  }\n\n  /** Update the map containing the content's column definitions. */\n  private _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name) &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n\n  /** Update the list of all available row definitions that can be used. */\n  private _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(\n        this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  private _renderUpdatedColumns(): boolean {\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\n\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\n    this._data = [];\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n\n    let dataStream: Observable<T[]|ReadonlyArray<T>>|undefined;\n\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = observableOf(this.dataSource);\n    }\n\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream!.pipe(takeUntil(this._onDestroy))\n      .subscribe(data => {\n        this._data = data || [];\n        this.renderRows();\n      });\n  }\n\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  private _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  private _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef!;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(\n        rows, stickyStartStates, stickyEndStates,\n        !this._fixedLayout || this._forceRecalculateCellWidths);\n  }\n\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\n    const renderedRows: HTMLElement[] = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n\n    let rowDefs: CdkRowDef<T>[] = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef =\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n\n  private _getEmbeddedViewArgs(renderRow: RenderRow<T>,\n                               index: number): _ViewRepeaterItemInsertArgs<RowContext<T>> {\n    const rowDef = renderRow.rowDef;\n    const context: RowContext<T> = {$implicit: renderRow.data};\n    return {\n      templateRef: rowDef.template,\n      context,\n      index,\n    };\n  }\n\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  private _renderRow(\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number,\n      context: RowContext<T> = {}): EmbeddedViewRef<RowContext<T>> {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n\n  private _renderCellTemplateForItem(rowDef: BaseRowDef, context: RowContext<T>) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\n      const context = viewRef.context as RowContext<T>;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n\n  /** Gets the column definitions for the provided row def. */\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column!);\n    });\n  }\n\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  private _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n    const sections = [\n      {tag: 'thead', outlets: [this._headerRowOutlet]},\n      {tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet]},\n      {tag: 'tfoot', outlets: [this._footerRowOutlet]},\n    ];\n\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n\n      documentFragment.appendChild(element);\n    }\n\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  private _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  private _checkStickyStates() {\n    const stickyCheckReducer = (acc: boolean,\n                                d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\n      return acc || d.hasStickyChanged();\n    };\n\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  private _setupStickyStyler() {\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(\n        this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler,\n        this._platform.isBrowser, this.needsPositionStickyOnElement);\n    (this._dir ? this._dir.change : observableOf<Direction>())\n    .pipe(takeUntil(this._onDestroy))\n    .subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n\n  /** Filters definitions that belong to this table from a QueryList. */\n  private _getOwnDefs<I extends {_table?: any}>(items: QueryList<I>): I[] {\n    return items.filter(item => !item._table || item._table === this);\n  }\n\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  private _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n\n    if (noDataRow) {\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n      if (shouldShow !== this._isShowingNoDataRow) {\n        const container = this._noDataRowOutlet.viewContainer;\n        shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n        this._isShowingNoDataRow = shouldShow;\n      }\n    }\n  }\n\n  static ngAcceptInputType_multiTemplateDataRows: BooleanInput;\n  static ngAcceptInputType_fixedLayout: BooleanInput;\n}\n\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet<T>(array: T[], set: Set<T>): T[] {\n  return array.concat(Array.from(set));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {CdkTable} from './table';\nimport {\n  getTableTextColumnMissingParentTableError,\n  getTableTextColumnMissingNameError,\n} from './table-errors';\nimport {TEXT_COLUMN_OPTIONS, TextColumnOptions} from './tokens';\n\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  selector: 'cdk-text-column',\n  template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class CdkTextColumn<T> implements OnDestroy, OnInit {\n  /** Column name that should be used to reference this column. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._name = name;\n\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  _name: string;\n\n  /**\n   * Text label that should be used for the column header. If this property is not\n   * set, the header text will default to the column name with its first letter capitalized.\n   */\n  @Input() headerText: string;\n\n  /**\n   * Accessor function to retrieve the data rendered for each cell. If this\n   * property is not set, the data cells will render the value found in the data's property matching\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\n   * value defined by the data's `id` property.\n   */\n  @Input() dataAccessor: (data: T, name: string) => string;\n\n  /** Alignment of the cell values. */\n  @Input() justify: 'start'|'end' = 'start';\n\n  /** @docs-private */\n  @ViewChild(CdkColumnDef, {static: true}) columnDef: CdkColumnDef;\n\n  /**\n   * The column cell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkCellDef, {static: true}) cell: CdkCellDef;\n\n  /**\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n   * column definition was provided in the same view as the table, which is not the case with this\n   * component.\n   * @docs-private\n   */\n  @ViewChild(CdkHeaderCellDef, {static: true}) headerCell: CdkHeaderCellDef;\n\n  constructor(\n      // `CdkTextColumn` is always requiring a table, but we just assert it manually\n      // for better error reporting.\n      // tslint:disable-next-line: lightweight-tokens\n      @Optional() private _table: CdkTable<T>,\n      @Optional() @Inject(TEXT_COLUMN_OPTIONS) private _options: TextColumnOptions<T>) {\n    this._options = _options || {};\n  }\n\n  ngOnInit() {\n    this._syncColumnDefName();\n\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n\n    if (!this.dataAccessor) {\n      this.dataAccessor =\n          this._options.defaultDataAccessor || ((data: T, name: string) => (data as any)[name]);\n    }\n\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n\n    return name[0].toUpperCase() + name.slice(1);\n  }\n\n  /** Synchronizes the column definition name with the text column name. */\n  private _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet, NoDataRowOutlet} from './table';\nimport {\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\n  CdkRowDef,\n  CdkNoDataRow\n} from './row';\nimport {\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\n  CdkFooterCellDef, CdkFooterCell\n} from './cell';\nimport {CdkTextColumn} from './text-column';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkFooterCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkFooterCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  DataRowOutlet,\n  HeaderRowOutlet,\n  FooterRowOutlet,\n  CdkTextColumn,\n  CdkNoDataRow,\n  NoDataRowOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  imports: [ScrollingModule]\n})\nexport class CdkTableModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table';\nexport * from './cell';\nexport * from './coalesced-style-scheduler';\nexport * from './row';\nexport * from './table-module';\nexport * from './sticky-styler';\nexport * from './can-stick';\nexport * from './text-column';\nexport * from './tokens';\n\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\nexport {DataSource} from '@angular/cdk/collections';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}